
RosRobotControllerM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800a004  0800a004  0000b004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a334  0800a334  0000c010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a33c  0800a33c  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a33c  0800a33c  0000b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a340  0800a340  0000b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800a344  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c010  2**0
                  CONTENTS
 10 .bss          0000c944  20000010  20000010  0000c010  2**2
                  ALLOC
 11 ._user_heap_stack 00000804  2000c954  2000c954  0000c010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fec3  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1a  00000000  00000000  0002bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c40  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001632  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cce  00000000  00000000  00032f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe98  00000000  00000000  00057c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e795c  00000000  00000000  00077af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f454  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007920  00000000  00000000  0015f498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00166db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fec 	.word	0x08009fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009fec 	.word	0x08009fec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f002 f832 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f92c 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 ff82 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 ff42 	bl	80013b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800052c:	f000 ff16 	bl	800135c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000530:	f000 fae2 	bl	8000af8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000534:	f000 fba6 	bl	8000c84 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000538:	f000 fca0 	bl	8000e7c <MX_TIM5_Init>
  MX_TIM9_Init();
 800053c:	f000 fd28 	bl	8000f90 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000540:	f000 fd94 	bl	800106c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000544:	f000 fde0 	bl	8001108 <MX_TIM11_Init>
  MX_I2C2_Init();
 8000548:	f000 fa72 	bl	8000a30 <MX_I2C2_Init>
  MX_TIM7_Init();
 800054c:	f000 fcea 	bl	8000f24 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000550:	f000 fbec 	bl	8000d2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000554:	f000 fc3e 	bl	8000dd4 <MX_TIM4_Init>
  MX_TIM13_Init();
 8000558:	f000 fe8c 	bl	8001274 <MX_TIM13_Init>
  MX_CRC_Init();
 800055c:	f000 fa26 	bl	80009ac <MX_CRC_Init>
  MX_TIM12_Init();
 8000560:	f000 fe20 	bl	80011a4 <MX_TIM12_Init>
  MX_ADC1_Init();
 8000564:	f000 f9c2 	bl	80008ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000568:	f000 fa34 	bl	80009d4 <MX_I2C1_Init>
  MX_UART5_Init();
 800056c:	f000 fecc 	bl	8001308 <MX_UART5_Init>
  MX_SPI1_Init();
 8000570:	f000 fa8c 	bl	8000a8c <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000574:	f000 f96e 	bl	8000854 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000578:	f006 fb5e 	bl	8006c38 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of oled_mutex */
  oled_mutexHandle = osMutexNew(&oled_mutex_attributes);
 800057c:	484e      	ldr	r0, [pc, #312]	@ (80006b8 <main+0x1a0>)
 800057e:	f006 fce3 	bl	8006f48 <osMutexNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a4d      	ldr	r2, [pc, #308]	@ (80006bc <main+0x1a4>)
 8000586:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of packet_tx_idle */
  packet_tx_idleHandle = osSemaphoreNew(1, 0, &packet_tx_idle_attributes);
 8000588:	4a4d      	ldr	r2, [pc, #308]	@ (80006c0 <main+0x1a8>)
 800058a:	2100      	movs	r1, #0
 800058c:	2001      	movs	r0, #1
 800058e:	f006 fd61 	bl	8007054 <osSemaphoreNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a4b      	ldr	r2, [pc, #300]	@ (80006c4 <main+0x1ac>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of packet_rx_not_empty */
  packet_rx_not_emptyHandle = osSemaphoreNew(1, 0, &packet_rx_not_empty_attributes);
 8000598:	4a4b      	ldr	r2, [pc, #300]	@ (80006c8 <main+0x1b0>)
 800059a:	2100      	movs	r1, #0
 800059c:	2001      	movs	r0, #1
 800059e:	f006 fd59 	bl	8007054 <osSemaphoreNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a49      	ldr	r2, [pc, #292]	@ (80006cc <main+0x1b4>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of IMU_data_ready */
  IMU_data_readyHandle = osSemaphoreNew(1, 0, &IMU_data_ready_attributes);
 80005a8:	4a49      	ldr	r2, [pc, #292]	@ (80006d0 <main+0x1b8>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	2001      	movs	r0, #1
 80005ae:	f006 fd51 	bl	8007054 <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a47      	ldr	r2, [pc, #284]	@ (80006d4 <main+0x1bc>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of spi_tx_finished */
  spi_tx_finishedHandle = osSemaphoreNew(1, 0, &spi_tx_finished_attributes);
 80005b8:	4a47      	ldr	r2, [pc, #284]	@ (80006d8 <main+0x1c0>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
 80005be:	f006 fd49 	bl	8007054 <osSemaphoreNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a45      	ldr	r2, [pc, #276]	@ (80006dc <main+0x1c4>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of serial_servo_rx_complete */
  serial_servo_rx_completeHandle = osSemaphoreNew(1, 0, &serial_servo_rx_complete_attributes);
 80005c8:	4a45      	ldr	r2, [pc, #276]	@ (80006e0 <main+0x1c8>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	2001      	movs	r0, #1
 80005ce:	f006 fd41 	bl	8007054 <osSemaphoreNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a43      	ldr	r2, [pc, #268]	@ (80006e4 <main+0x1cc>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of button_timer */
  button_timerHandle = osTimerNew(button_timer_callback, osTimerPeriodic, NULL, &button_timer_attributes);
 80005d8:	4b43      	ldr	r3, [pc, #268]	@ (80006e8 <main+0x1d0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	4843      	ldr	r0, [pc, #268]	@ (80006ec <main+0x1d4>)
 80005e0:	f006 fc36 	bl	8006e50 <osTimerNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a42      	ldr	r2, [pc, #264]	@ (80006f0 <main+0x1d8>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* creation of led_timer */
  led_timerHandle = osTimerNew(led_timer_callback, osTimerPeriodic, NULL, &led_timer_attributes);
 80005ea:	4b42      	ldr	r3, [pc, #264]	@ (80006f4 <main+0x1dc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	4841      	ldr	r0, [pc, #260]	@ (80006f8 <main+0x1e0>)
 80005f2:	f006 fc2d 	bl	8006e50 <osTimerNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a40      	ldr	r2, [pc, #256]	@ (80006fc <main+0x1e4>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of buzzer_timer */
  buzzer_timerHandle = osTimerNew(buzzer_timer_callback, osTimerPeriodic, NULL, &buzzer_timer_attributes);
 80005fc:	4b40      	ldr	r3, [pc, #256]	@ (8000700 <main+0x1e8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4840      	ldr	r0, [pc, #256]	@ (8000704 <main+0x1ec>)
 8000604:	f006 fc24 	bl	8006e50 <osTimerNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a3f      	ldr	r2, [pc, #252]	@ (8000708 <main+0x1f0>)
 800060c:	6013      	str	r3, [r2, #0]

  /* creation of battery_check_timer */
  battery_check_timerHandle = osTimerNew(battery_check_timer_callback, osTimerPeriodic, NULL, &battery_check_timer_attributes);
 800060e:	4b3f      	ldr	r3, [pc, #252]	@ (800070c <main+0x1f4>)
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	483e      	ldr	r0, [pc, #248]	@ (8000710 <main+0x1f8>)
 8000616:	f006 fc1b 	bl	8006e50 <osTimerNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a3d      	ldr	r2, [pc, #244]	@ (8000714 <main+0x1fc>)
 800061e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of packet_tx_queue */
  packet_tx_queueHandle = osMessageQueueNew (64, sizeof(void*), &packet_tx_queue_attributes);
 8000620:	4a3d      	ldr	r2, [pc, #244]	@ (8000718 <main+0x200>)
 8000622:	2104      	movs	r1, #4
 8000624:	2040      	movs	r0, #64	@ 0x40
 8000626:	f006 fd9e 	bl	8007166 <osMessageQueueNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a3b      	ldr	r2, [pc, #236]	@ (800071c <main+0x204>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of moving_ctrl_queue */
  moving_ctrl_queueHandle = osMessageQueueNew (32, sizeof(char), &moving_ctrl_queue_attributes);
 8000630:	4a3b      	ldr	r2, [pc, #236]	@ (8000720 <main+0x208>)
 8000632:	2101      	movs	r1, #1
 8000634:	2020      	movs	r0, #32
 8000636:	f006 fd96 	bl	8007166 <osMessageQueueNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a39      	ldr	r2, [pc, #228]	@ (8000724 <main+0x20c>)
 800063e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000640:	4a39      	ldr	r2, [pc, #228]	@ (8000728 <main+0x210>)
 8000642:	2100      	movs	r1, #0
 8000644:	4839      	ldr	r0, [pc, #228]	@ (800072c <main+0x214>)
 8000646:	f006 fb41 	bl	8006ccc <osThreadNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a38      	ldr	r2, [pc, #224]	@ (8000730 <main+0x218>)
 800064e:	6013      	str	r3, [r2, #0]

  /* creation of imu_task */
  imu_taskHandle = osThreadNew(imu_task_entry, NULL, &imu_task_attributes);
 8000650:	4a38      	ldr	r2, [pc, #224]	@ (8000734 <main+0x21c>)
 8000652:	2100      	movs	r1, #0
 8000654:	4838      	ldr	r0, [pc, #224]	@ (8000738 <main+0x220>)
 8000656:	f006 fb39 	bl	8006ccc <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a37      	ldr	r2, [pc, #220]	@ (800073c <main+0x224>)
 800065e:	6013      	str	r3, [r2, #0]

  /* creation of packet_tx_task */
  packet_tx_taskHandle = osThreadNew(packet_tx_task_entry, NULL, &packet_tx_task_attributes);
 8000660:	4a37      	ldr	r2, [pc, #220]	@ (8000740 <main+0x228>)
 8000662:	2100      	movs	r1, #0
 8000664:	4837      	ldr	r0, [pc, #220]	@ (8000744 <main+0x22c>)
 8000666:	f006 fb31 	bl	8006ccc <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a36      	ldr	r2, [pc, #216]	@ (8000748 <main+0x230>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of packet_rx_task */
  packet_rx_taskHandle = osThreadNew(packet_rx_task_entry, NULL, &packet_rx_task_attributes);
 8000670:	4a36      	ldr	r2, [pc, #216]	@ (800074c <main+0x234>)
 8000672:	2100      	movs	r1, #0
 8000674:	4836      	ldr	r0, [pc, #216]	@ (8000750 <main+0x238>)
 8000676:	f006 fb29 	bl	8006ccc <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a35      	ldr	r2, [pc, #212]	@ (8000754 <main+0x23c>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of gui_task */
  gui_taskHandle = osThreadNew(gui_task_entry, NULL, &gui_task_attributes);
 8000680:	4a35      	ldr	r2, [pc, #212]	@ (8000758 <main+0x240>)
 8000682:	2100      	movs	r1, #0
 8000684:	4835      	ldr	r0, [pc, #212]	@ (800075c <main+0x244>)
 8000686:	f006 fb21 	bl	8006ccc <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a34      	ldr	r2, [pc, #208]	@ (8000760 <main+0x248>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of app_task */
  app_taskHandle = osThreadNew(app_task_entry, NULL, &app_task_attributes);
 8000690:	4a34      	ldr	r2, [pc, #208]	@ (8000764 <main+0x24c>)
 8000692:	2100      	movs	r1, #0
 8000694:	4834      	ldr	r0, [pc, #208]	@ (8000768 <main+0x250>)
 8000696:	f006 fb19 	bl	8006ccc <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a33      	ldr	r2, [pc, #204]	@ (800076c <main+0x254>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of oled_task */
  oled_taskHandle = osThreadNew(oled_task_entry, NULL, &oled_task_attributes);
 80006a0:	4a33      	ldr	r2, [pc, #204]	@ (8000770 <main+0x258>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4833      	ldr	r0, [pc, #204]	@ (8000774 <main+0x25c>)
 80006a6:	f006 fb11 	bl	8006ccc <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a32      	ldr	r2, [pc, #200]	@ (8000778 <main+0x260>)
 80006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b0:	f006 fae6 	bl	8006c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <main+0x19c>
 80006b8:	0800a2b4 	.word	0x0800a2b4
 80006bc:	20000f34 	.word	0x20000f34
 80006c0:	0800a2c4 	.word	0x0800a2c4
 80006c4:	20000f38 	.word	0x20000f38
 80006c8:	0800a2d4 	.word	0x0800a2d4
 80006cc:	20000f3c 	.word	0x20000f3c
 80006d0:	0800a2e4 	.word	0x0800a2e4
 80006d4:	20000f40 	.word	0x20000f40
 80006d8:	0800a2f4 	.word	0x0800a2f4
 80006dc:	20000f44 	.word	0x20000f44
 80006e0:	0800a304 	.word	0x0800a304
 80006e4:	20000f48 	.word	0x20000f48
 80006e8:	0800a274 	.word	0x0800a274
 80006ec:	08001701 	.word	0x08001701
 80006f0:	20000e74 	.word	0x20000e74
 80006f4:	0800a284 	.word	0x0800a284
 80006f8:	08001715 	.word	0x08001715
 80006fc:	20000ea4 	.word	0x20000ea4
 8000700:	0800a294 	.word	0x0800a294
 8000704:	08001729 	.word	0x08001729
 8000708:	20000ed4 	.word	0x20000ed4
 800070c:	0800a2a4 	.word	0x0800a2a4
 8000710:	0800173d 	.word	0x0800173d
 8000714:	20000f04 	.word	0x20000f04
 8000718:	0800a244 	.word	0x0800a244
 800071c:	20000cac 	.word	0x20000cac
 8000720:	0800a25c 	.word	0x0800a25c
 8000724:	20000e00 	.word	0x20000e00
 8000728:	0800a148 	.word	0x0800a148
 800072c:	08001691 	.word	0x08001691
 8000730:	20000c90 	.word	0x20000c90
 8000734:	0800a16c 	.word	0x0800a16c
 8000738:	080016a1 	.word	0x080016a1
 800073c:	20000c94 	.word	0x20000c94
 8000740:	0800a190 	.word	0x0800a190
 8000744:	080016b1 	.word	0x080016b1
 8000748:	20000c98 	.word	0x20000c98
 800074c:	0800a1b4 	.word	0x0800a1b4
 8000750:	080016c1 	.word	0x080016c1
 8000754:	20000c9c 	.word	0x20000c9c
 8000758:	0800a1d8 	.word	0x0800a1d8
 800075c:	080016d1 	.word	0x080016d1
 8000760:	20000ca0 	.word	0x20000ca0
 8000764:	0800a1fc 	.word	0x0800a1fc
 8000768:	080016e1 	.word	0x080016e1
 800076c:	20000ca4 	.word	0x20000ca4
 8000770:	0800a220 	.word	0x0800a220
 8000774:	080016f1 	.word	0x080016f1
 8000778:	20000ca8 	.word	0x20000ca8

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f009 fbf4 	bl	8009f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f0:	23a8      	movs	r3, #168	@ 0xa8
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f8d7 	bl	80039b4 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 ffb2 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2105      	movs	r1, #5
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fb38 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 ff9b 	bl	8001774 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800083e:	f003 fc17 	bl	8004070 <HAL_RCC_EnableCSS>
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	200d      	movs	r0, #13
 800085e:	f002 f9ed 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000862:	200d      	movs	r0, #13
 8000864:	f002 fa06 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2105      	movs	r1, #5
 800086c:	201c      	movs	r0, #28
 800086e:	f002 f9e5 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000872:	201c      	movs	r0, #28
 8000874:	f002 f9fe 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	201d      	movs	r0, #29
 800087e:	f002 f9dd 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000882:	201d      	movs	r0, #29
 8000884:	f002 f9f6 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2028      	movs	r0, #40	@ 0x28
 800088e:	f002 f9d5 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000892:	2028      	movs	r0, #40	@ 0x28
 8000894:	f002 f9ee 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM8_BRK_TIM12_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2105      	movs	r1, #5
 800089c:	202b      	movs	r0, #43	@ 0x2b
 800089e:	f002 f9cd 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80008a2:	202b      	movs	r0, #43	@ 0x2b
 80008a4:	f002 f9e6 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM8_UP_TIM13_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2105      	movs	r1, #5
 80008ac:	202c      	movs	r0, #44	@ 0x2c
 80008ae:	f002 f9c5 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80008b2:	202c      	movs	r0, #44	@ 0x2c
 80008b4:	f002 f9de 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2105      	movs	r1, #5
 80008bc:	202f      	movs	r0, #47	@ 0x2f
 80008be:	f002 f9bd 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008c2:	202f      	movs	r0, #47	@ 0x2f
 80008c4:	f002 f9d6 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2105      	movs	r1, #5
 80008cc:	2032      	movs	r0, #50	@ 0x32
 80008ce:	f002 f9b5 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008d2:	2032      	movs	r0, #50	@ 0x32
 80008d4:	f002 f9ce 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	2037      	movs	r0, #55	@ 0x37
 80008de:	f002 f9ad 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008e2:	2037      	movs	r0, #55	@ 0x37
 80008e4:	f002 f9c6 	bl	8002c74 <HAL_NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000900:	4a28      	ldr	r2, [pc, #160]	@ (80009a4 <MX_ADC1_Init+0xb8>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000904:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000906:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800090a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090c:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000914:	2201      	movs	r2, #1
 8000916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800091a:	2200      	movs	r2, #0
 800091c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800092e:	4a1e      	ldr	r2, [pc, #120]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000930:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800093a:	2202      	movs	r2, #2
 800093c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800094e:	f001 fe5b 	bl	8002608 <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000958:	f000 ff0c 	bl	8001774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800095c:	2311      	movs	r3, #17
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000964:	2307      	movs	r3, #7
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800096e:	f001 fe8f 	bl	8002690 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000978:	f000 fefc 	bl	8001774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800097c:	2308      	movs	r3, #8
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_ADC1_Init+0xb4>)
 800098a:	f001 fe81 	bl	8002690 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000994:	f000 feee 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000002c 	.word	0x2000002c
 80009a4:	40012000 	.word	0x40012000
 80009a8:	0f000001 	.word	0x0f000001

080009ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_CRC_Init+0x20>)
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <MX_CRC_Init+0x24>)
 80009b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_CRC_Init+0x20>)
 80009b8:	f002 f96a 	bl	8002c90 <HAL_CRC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009c2:	f000 fed7 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000d4 	.word	0x200000d4
 80009d0:	40023000 	.word	0x40023000

080009d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_I2C1_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a12:	f002 fe8b 	bl	800372c <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 feaa 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000dc 	.word	0x200000dc
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <MX_I2C2_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_I2C2_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_I2C2_Init+0x50>)
 8000a6e:	f002 fe5d 	bl	800372c <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 fe7c 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000130 	.word	0x20000130
 8000a84:	40005800 	.word	0x40005800
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <MX_SPI1_Init+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ac0:	2218      	movs	r2, #24
 8000ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ad8:	220a      	movs	r2, #10
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ade:	f003 fc59 	bl	8004394 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae8:	f000 fe44 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000244 	.word	0x20000244
 8000af4:	40013000 	.word	0x40013000

08000af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b096      	sub	sp, #88	@ 0x58
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f009 fa21 	bl	8009f78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b36:	4b51      	ldr	r3, [pc, #324]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b38:	4a51      	ldr	r2, [pc, #324]	@ (8000c80 <MX_TIM1_Init+0x188>)
 8000b3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 8000b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b3e:	f240 3247 	movw	r2, #839	@ 0x347
 8000b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b4d      	ldr	r3, [pc, #308]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b4a      	ldr	r3, [pc, #296]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b58:	4b48      	ldr	r3, [pc, #288]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b5e:	4b47      	ldr	r3, [pc, #284]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b64:	4845      	ldr	r0, [pc, #276]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b66:	f003 fe37 	bl	80047d8 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b70:	f000 fe00 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483e      	ldr	r0, [pc, #248]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b82:	f004 faa3 	bl	80050cc <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b8c:	f000 fdf2 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b90:	483a      	ldr	r0, [pc, #232]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000b92:	f003 ff53 	bl	8004a3c <HAL_TIM_PWM_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b9c:	f000 fdea 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bac:	4619      	mov	r1, r3
 8000bae:	4833      	ldr	r0, [pc, #204]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000bb0:	f004 fef6 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bba:	f000 fddb 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	@ 0x60
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4826      	ldr	r0, [pc, #152]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000be4:	f004 f9b0 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000bee:	f000 fdc1 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4820      	ldr	r0, [pc, #128]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000bfc:	f004 f9a4 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000c06:	f000 fdb5 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000c14:	f004 f998 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c1e:	f000 fda9 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	220c      	movs	r2, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000c2c:	f004 f98c 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c36:	f000 fd9d 	bl	8001774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000c5e:	f004 ff1b 	bl	8005a98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000c68:	f000 fd84 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM1_Init+0x184>)
 8000c6e:	f001 f977 	bl	8001f60 <HAL_TIM_MspPostInit>

}
 8000c72:	bf00      	nop
 8000c74:	3758      	adds	r7, #88	@ 0x58
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000324 	.word	0x20000324
 8000c80:	40010000 	.word	0x40010000

08000c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f009 f970 	bl	8009f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000cb6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000cf4:	f003 ff08 	bl	8004b08 <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fd39 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM2_Init+0xa4>)
 8000d10:	f004 fe46 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 fd2b 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200003d8 	.word	0x200003d8

08000d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	@ 0x30
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2224      	movs	r2, #36	@ 0x24
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 f91c 	bl	8009f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d48:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <MX_TIM3_Init+0xa4>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d5c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d6a:	2280      	movs	r2, #128	@ 0x80
 8000d6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d86:	2301      	movs	r3, #1
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000d9a:	f003 feb5 	bl	8004b08 <HAL_TIM_Encoder_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f000 fce6 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_TIM3_Init+0xa0>)
 8000db6:	f004 fdf3 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000dc0:	f000 fcd8 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	@ 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000048c 	.word	0x2000048c
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	2224      	movs	r2, #36	@ 0x24
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f009 f8c8 	bl	8009f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000df2:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <MX_TIM4_Init+0xa4>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000e04:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000e08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000e12:	2280      	movs	r2, #128	@ 0x80
 8000e14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e16:	2303      	movs	r3, #3
 8000e18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000e42:	f003 fe61 	bl	8004b08 <HAL_TIM_Encoder_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 fc92 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_TIM4_Init+0xa0>)
 8000e5e:	f004 fd9f 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e68:	f000 fc84 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	@ 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000540 	.word	0x20000540
 8000e78:	40000800 	.word	0x40000800

08000e7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2224      	movs	r2, #36	@ 0x24
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 f874 	bl	8009f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <MX_TIM5_Init+0xa4>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000eac:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000eb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000eea:	f003 fe0d 	bl	8004b08 <HAL_TIM_Encoder_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ef4:	f000 fc3e 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_TIM5_Init+0xa0>)
 8000f06:	f004 fd4b 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000f10:	f000 fc30 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	@ 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200005f4 	.word	0x200005f4
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f34:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <MX_TIM7_Init+0x68>)
 8000f36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f3a:	2253      	movs	r2, #83	@ 0x53
 8000f3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000f44:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f46:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f4e:	2280      	movs	r2, #128	@ 0x80
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f54:	f003 fc40 	bl	80047d8 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000f5e:	f000 fc09 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_TIM7_Init+0x64>)
 8000f70:	f004 fd16 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000f7a:	f000 fbfb 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200006a8 	.word	0x200006a8
 8000f8c:	40001400 	.word	0x40001400

08000f90 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	@ 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001068 <MX_TIM9_Init+0xd8>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fbe:	f240 3247 	movw	r2, #839	@ 0x347
 8000fc2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fd0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fda:	2280      	movs	r2, #128	@ 0x80
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000fde:	4821      	ldr	r0, [pc, #132]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000fe0:	f003 fbfa 	bl	80047d8 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8000fea:	f000 fbc3 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481a      	ldr	r0, [pc, #104]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8000ffc:	f004 f866 	bl	80050cc <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 fbb5 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800100a:	4816      	ldr	r0, [pc, #88]	@ (8001064 <MX_TIM9_Init+0xd4>)
 800100c:	f003 fd16 	bl	8004a3c <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001016:	f000 fbad 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001026:	2304      	movs	r3, #4
 8001028:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8001032:	f003 ff89 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800103c:	f000 fb9a 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2204      	movs	r2, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8001048:	f003 ff7e 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8001052:	f000 fb8f 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM9_Init+0xd4>)
 8001058:	f000 ff82 	bl	8001f60 <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3730      	adds	r7, #48	@ 0x30
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000075c 	.word	0x2000075c
 8001068:	40014000 	.word	0x40014000

0800106c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_TIM10_Init+0x94>)
 8001086:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <MX_TIM10_Init+0x98>)
 8001088:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM10_Init+0x94>)
 800108c:	f240 3247 	movw	r2, #839	@ 0x347
 8001090:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_TIM10_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_TIM10_Init+0x94>)
 800109a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ac:	4814      	ldr	r0, [pc, #80]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010ae:	f003 fb93 	bl	80047d8 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80010b8:	f000 fb5c 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010be:	f003 fcbd 	bl	8004a3c <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 fb54 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	@ 0x60
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010d8:	2304      	movs	r3, #4
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010e4:	f003 ff30 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 fb41 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM10_Init+0x94>)
 80010f4:	f000 ff34 	bl	8001f60 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000810 	.word	0x20000810
 8001104:	40014400 	.word	0x40014400

08001108 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <MX_TIM11_Init+0x94>)
 8001122:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <MX_TIM11_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8001126:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_TIM11_Init+0x94>)
 8001128:	f240 3247 	movw	r2, #839	@ 0x347
 800112c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <MX_TIM11_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_TIM11_Init+0x94>)
 8001136:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800113a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_TIM11_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_TIM11_Init+0x94>)
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001148:	4814      	ldr	r0, [pc, #80]	@ (800119c <MX_TIM11_Init+0x94>)
 800114a:	f003 fb45 	bl	80047d8 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8001154:	f000 fb0e 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001158:	4810      	ldr	r0, [pc, #64]	@ (800119c <MX_TIM11_Init+0x94>)
 800115a:	f003 fc6f 	bl	8004a3c <HAL_TIM_PWM_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 fb06 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001168:	2360      	movs	r3, #96	@ 0x60
 800116a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001174:	2304      	movs	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <MX_TIM11_Init+0x94>)
 8001180:	f003 fee2 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800118a:	f000 faf3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800118e:	4803      	ldr	r0, [pc, #12]	@ (800119c <MX_TIM11_Init+0x94>)
 8001190:	f000 fee6 	bl	8001f60 <HAL_TIM_MspPostInit>

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200008c4 	.word	0x200008c4
 80011a0:	40014800 	.word	0x40014800

080011a4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <MX_TIM12_Init+0xcc>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 839;
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011d2:	f240 3247 	movw	r2, #839	@ 0x347
 80011d6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011e0:	2263      	movs	r2, #99	@ 0x63
 80011e2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <MX_TIM12_Init+0xc8>)
 80011f2:	f003 faf1 	bl	80047d8 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 faba 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4619      	mov	r1, r3
 800120c:	4817      	ldr	r0, [pc, #92]	@ (800126c <MX_TIM12_Init+0xc8>)
 800120e:	f003 ff5d 	bl	80050cc <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001218:	f000 faac 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <MX_TIM12_Init+0xc8>)
 800121e:	f003 fba7 	bl	8004970 <HAL_TIM_OC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001228:	f000 faa4 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001230:	2332      	movs	r3, #50	@ 0x32
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	480a      	ldr	r0, [pc, #40]	@ (800126c <MX_TIM12_Init+0xc8>)
 8001244:	f003 fe24 	bl	8004e90 <HAL_TIM_OC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800124e:	f000 fa91 	bl	8001774 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim12, TIM_CHANNEL_1);
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_TIM12_Init+0xc8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <MX_TIM12_Init+0xc8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0208 	orr.w	r2, r2, #8
 8001260:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000978 	.word	0x20000978
 8001270:	40001800 	.word	0x40001800

08001274 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM13_Init+0x8c>)
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <MX_TIM13_Init+0x90>)
 8001290:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_TIM13_Init+0x8c>)
 8001294:	2253      	movs	r2, #83	@ 0x53
 8001296:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM13_Init+0x8c>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4999;
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012a4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012ae:	2280      	movs	r2, #128	@ 0x80
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012b2:	4813      	ldr	r0, [pc, #76]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012b4:	f003 fa90 	bl	80047d8 <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80012be:	f000 fa59 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 80012c2:	480f      	ldr	r0, [pc, #60]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012c4:	f003 fb54 	bl	8004970 <HAL_TIM_OC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f000 fa51 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_TIM13_Init+0x8c>)
 80012ea:	f003 fdd1 	bl	8004e90 <HAL_TIM_OC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80012f4:	f000 fa3e 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000a2c 	.word	0x20000a2c
 8001304:	40001c00 	.word	0x40001c00

08001308 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_UART5_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_UART5_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_UART5_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_UART5_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_UART5_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_UART5_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_UART5_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_UART5_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_UART5_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_UART5_Init+0x4c>)
 8001340:	f004 fc78 	bl	8005c34 <HAL_HalfDuplex_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 fa13 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000ae0 	.word	0x20000ae0
 8001358:	40005000 	.word	0x40005000

0800135c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_USART1_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001394:	f004 fbf0 	bl	8005b78 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f9e9 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000b58 	.word	0x20000b58
 80013ac:	40011000 	.word	0x40011000

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <MX_DMA_Init+0x78>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a1a      	ldr	r2, [pc, #104]	@ (8001428 <MX_DMA_Init+0x78>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_DMA_Init+0x78>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_DMA_Init+0x78>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <MX_DMA_Init+0x78>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_DMA_Init+0x78>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	203a      	movs	r0, #58	@ 0x3a
 80013f4:	f001 fc22 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013f8:	203a      	movs	r0, #58	@ 0x3a
 80013fa:	f001 fc3b 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	203b      	movs	r0, #59	@ 0x3b
 8001404:	f001 fc1a 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001408:	203b      	movs	r0, #59	@ 0x3b
 800140a:	f001 fc33 	bl	8002c74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	2046      	movs	r0, #70	@ 0x46
 8001414:	f001 fc12 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001418:	2046      	movs	r0, #70	@ 0x46
 800141a:	f001 fc2b 	bl	8002c74 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b8c      	ldr	r3, [pc, #560]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a8b      	ldr	r2, [pc, #556]	@ (8001678 <MX_GPIO_Init+0x24c>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b89      	ldr	r3, [pc, #548]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	4b85      	ldr	r3, [pc, #532]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a84      	ldr	r2, [pc, #528]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b82      	ldr	r3, [pc, #520]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b7e      	ldr	r3, [pc, #504]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a7d      	ldr	r2, [pc, #500]	@ (8001678 <MX_GPIO_Init+0x24c>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b7b      	ldr	r3, [pc, #492]	@ (8001678 <MX_GPIO_Init+0x24c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <MX_GPIO_Init+0x24c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a76      	ldr	r2, [pc, #472]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b74      	ldr	r3, [pc, #464]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b70      	ldr	r3, [pc, #448]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b69      	ldr	r3, [pc, #420]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a68      	ldr	r2, [pc, #416]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b66      	ldr	r3, [pc, #408]	@ (8001678 <MX_GPIO_Init+0x24c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|BUZZER_OLD_Pin|PWM_SERVO_1_Pin|PWM_SERVO_2_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 51ca 	mov.w	r1, #6464	@ 0x1940
 80014f0:	4862      	ldr	r0, [pc, #392]	@ (800167c <MX_GPIO_Init+0x250>)
 80014f2:	f002 f901 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80014fc:	4860      	ldr	r0, [pc, #384]	@ (8001680 <MX_GPIO_Init+0x254>)
 80014fe:	f002 f8fb 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001508:	485d      	ldr	r0, [pc, #372]	@ (8001680 <MX_GPIO_Init+0x254>)
 800150a:	f002 f8f5 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_SERVO_3_GPIO_Port, PWM_SERVO_3_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001514:	485b      	ldr	r0, [pc, #364]	@ (8001684 <MX_GPIO_Init+0x258>)
 8001516:	f002 f8ef 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_SERVO_4_GPIO_Port, PWM_SERVO_4_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001520:	4858      	ldr	r0, [pc, #352]	@ (8001684 <MX_GPIO_Init+0x258>)
 8001522:	f002 f8e9 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001526:	f249 539c 	movw	r3, #38300	@ 0x959c
 800152a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4853      	ldr	r0, [pc, #332]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800153c:	f001 ff40 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001540:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 8001544:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	484b      	ldr	r0, [pc, #300]	@ (8001684 <MX_GPIO_Init+0x258>)
 8001556:	f001 ff33 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800155a:	231c      	movs	r3, #28
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4843      	ldr	r0, [pc, #268]	@ (800167c <MX_GPIO_Init+0x250>)
 800156e:	f001 ff27 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin BUZZER_OLD_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BUZZER_OLD_Pin;
 8001572:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	483c      	ldr	r0, [pc, #240]	@ (800167c <MX_GPIO_Init+0x250>)
 800158c:	f001 ff18 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8001590:	f24e 0306 	movw	r3, #57350	@ 0xe006
 8001594:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4839      	ldr	r0, [pc, #228]	@ (800168c <MX_GPIO_Init+0x260>)
 80015a6:	f001 ff0b 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_ITR_Pin */
  GPIO_InitStruct.Pin = IMU_ITR_Pin;
 80015aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IMU_ITR_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4832      	ldr	r0, [pc, #200]	@ (800168c <MX_GPIO_Init+0x260>)
 80015c2:	f001 fefd 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 PD15 PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80015c6:	f24c 13ff 	movw	r3, #49663	@ 0xc1ff
 80015ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4829      	ldr	r0, [pc, #164]	@ (8001680 <MX_GPIO_Init+0x254>)
 80015dc:	f001 fef0 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80015e0:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4821      	ldr	r0, [pc, #132]	@ (8001680 <MX_GPIO_Init+0x254>)
 80015fa:	f001 fee1 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_SERVO_3_Pin */
  GPIO_InitStruct.Pin = PWM_SERVO_3_Pin;
 80015fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PWM_SERVO_3_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	481b      	ldr	r0, [pc, #108]	@ (8001684 <MX_GPIO_Init+0x258>)
 8001618:	f001 fed2 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_SERVO_4_Pin */
  GPIO_InitStruct.Pin = PWM_SERVO_4_Pin;
 800161c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PWM_SERVO_4_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4813      	ldr	r0, [pc, #76]	@ (8001684 <MX_GPIO_Init+0x258>)
 8001636:	f001 fec3 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_SERVO_1_Pin PWM_SERVO_2_Pin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin;
 800163a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <MX_GPIO_Init+0x250>)
 8001654:	f001 feb4 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin;
 8001658:	2303      	movs	r3, #3
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	@ (8001688 <MX_GPIO_Init+0x25c>)
 800166c:	f001 fea8 	bl	80033c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	@ 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40020800 	.word	0x40020800
 8001688:	40021000 	.word	0x40021000
 800168c:	40020400 	.word	0x40020400

08001690 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f005 fba9 	bl	8006df0 <osDelay>
 800169e:	e7fb      	b.n	8001698 <StartDefaultTask+0x8>

080016a0 <imu_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_task_entry */
__weak void imu_task_entry(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f005 fba1 	bl	8006df0 <osDelay>
 80016ae:	e7fb      	b.n	80016a8 <imu_task_entry+0x8>

080016b0 <packet_tx_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_packet_tx_task_entry */
__weak void packet_tx_task_entry(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN packet_tx_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f005 fb99 	bl	8006df0 <osDelay>
 80016be:	e7fb      	b.n	80016b8 <packet_tx_task_entry+0x8>

080016c0 <packet_rx_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_packet_rx_task_entry */
__weak void packet_rx_task_entry(void *argument)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN packet_rx_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f005 fb91 	bl	8006df0 <osDelay>
 80016ce:	e7fb      	b.n	80016c8 <packet_rx_task_entry+0x8>

080016d0 <gui_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gui_task_entry */
__weak void gui_task_entry(void *argument)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gui_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f005 fb89 	bl	8006df0 <osDelay>
 80016de:	e7fb      	b.n	80016d8 <gui_task_entry+0x8>

080016e0 <app_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_app_task_entry */
__weak void app_task_entry(void *argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f005 fb81 	bl	8006df0 <osDelay>
 80016ee:	e7fb      	b.n	80016e8 <app_task_entry+0x8>

080016f0 <oled_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_task_entry */
__weak void oled_task_entry(void *argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f005 fb79 	bl	8006df0 <osDelay>
 80016fe:	e7fb      	b.n	80016f8 <oled_task_entry+0x8>

08001700 <button_timer_callback>:
  /* USER CODE END oled_task_entry */
}

/* button_timer_callback function */
__weak void button_timer_callback(void *argument)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_timer_callback */

  /* USER CODE END button_timer_callback */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <led_timer_callback>:

/* led_timer_callback function */
__weak void led_timer_callback(void *argument)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_timer_callback */

  /* USER CODE END led_timer_callback */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <buzzer_timer_callback>:

/* buzzer_timer_callback function */
__weak void buzzer_timer_callback(void *argument)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buzzer_timer_callback */

  /* USER CODE END buzzer_timer_callback */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <battery_check_timer_callback>:

/* battery_check_timer_callback function */
__weak void battery_check_timer_callback(void *argument)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN battery_check_timer_callback */

  /* USER CODE END battery_check_timer_callback */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001762:	f000 ff31 	bl	80025c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40002000 	.word	0x40002000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_MspInit+0x54>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <HAL_MspInit+0x54>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x54>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_MspInit+0x54>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_MspInit+0x54>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_MspInit+0x54>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	f06f 0001 	mvn.w	r0, #1
 80017c6:	f001 fa39 	bl	8002c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <HAL_ADC_MspInit+0xdc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d157      	bne.n	80018aa <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a2d      	ldr	r2, [pc, #180]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001836:	2303      	movs	r3, #3
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	481d      	ldr	r0, [pc, #116]	@ (80018bc <HAL_ADC_MspInit+0xe4>)
 8001846:	f001 fdbb 	bl	80033c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <HAL_ADC_MspInit+0xec>)
 800184e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800186c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001870:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800187c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001880:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800188e:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001890:	f001 fa1a 	bl	8002cc8 <HAL_DMA_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800189a:	f7ff ff6b 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 80018a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	@ 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40012000 	.word	0x40012000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	20000074 	.word	0x20000074
 80018c4:	40026410 	.word	0x40026410

080018c8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <HAL_CRC_MspInit+0x3c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10d      	bne.n	80018f6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_CRC_MspInit+0x40>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_CRC_MspInit+0x40>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <HAL_CRC_MspInit+0x40>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023000 	.word	0x40023000
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a62      	ldr	r2, [pc, #392]	@ (8001ab4 <HAL_I2C_MspInit+0x1a8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12c      	bne.n	8001988 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	4b61      	ldr	r3, [pc, #388]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a60      	ldr	r2, [pc, #384]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195a:	2304      	movs	r3, #4
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4855      	ldr	r0, [pc, #340]	@ (8001abc <HAL_I2C_MspInit+0x1b0>)
 8001966:	f001 fd2b 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4b52      	ldr	r3, [pc, #328]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a51      	ldr	r2, [pc, #324]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 8001974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001986:	e090      	b.n	8001aaa <HAL_I2C_MspInit+0x19e>
  else if(hi2c->Instance==I2C2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac0 <HAL_I2C_MspInit+0x1b4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	f040 808b 	bne.w	8001aaa <HAL_I2C_MspInit+0x19e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4a46      	ldr	r2, [pc, #280]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a4:	4b44      	ldr	r3, [pc, #272]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	2312      	movs	r3, #18
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c2:	2304      	movs	r3, #4
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	483b      	ldr	r0, [pc, #236]	@ (8001abc <HAL_I2C_MspInit+0x1b0>)
 80019ce:	f001 fcf7 	bl	80033c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a37      	ldr	r2, [pc, #220]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 80019dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_I2C_MspInit+0x1ac>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80019ee:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 80019f0:	4a35      	ldr	r2, [pc, #212]	@ (8001ac8 <HAL_I2C_MspInit+0x1bc>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80019f4:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 80019f6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fc:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a02:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a22:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a28:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001a30:	4824      	ldr	r0, [pc, #144]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a32:	f001 f949 	bl	8002cc8 <HAL_DMA_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_MspInit+0x134>
      Error_Handler();
 8001a3c:	f7ff fe9a 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <HAL_I2C_MspInit+0x1b8>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a4e:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_I2C_MspInit+0x1c4>)
 8001a50:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a54:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a82:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a86:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a8e:	480f      	ldr	r0, [pc, #60]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001a90:	f001 f91a 	bl	8002cc8 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_MspInit+0x192>
      Error_Handler();
 8001a9a:	f7ff fe6b 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa4:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_I2C_MspInit+0x1c0>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001aaa:	bf00      	nop
 8001aac:	3730      	adds	r7, #48	@ 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40005800 	.word	0x40005800
 8001ac4:	20000184 	.word	0x20000184
 8001ac8:	40026040 	.word	0x40026040
 8001acc:	200001e4 	.word	0x200001e4
 8001ad0:	400260b8 	.word	0x400260b8

08001ad4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <HAL_SPI_MspInit+0x110>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d172      	bne.n	8001bdc <HAL_SPI_MspInit+0x108>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a3a      	ldr	r2, [pc, #232]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <HAL_SPI_MspInit+0x114>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4828      	ldr	r0, [pc, #160]	@ (8001bec <HAL_SPI_MspInit+0x118>)
 8001b4a:	f001 fc39 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b4e:	2380      	movs	r3, #128	@ 0x80
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4820      	ldr	r0, [pc, #128]	@ (8001bec <HAL_SPI_MspInit+0x118>)
 8001b6a:	f001 fc29 	bl	80033c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b70:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <HAL_SPI_MspInit+0x120>)
 8001b72:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b76:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001b7a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001ba4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bb0:	480f      	ldr	r0, [pc, #60]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001bb2:	f001 f889 	bl	8002cc8 <HAL_DMA_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001bbc:	f7ff fdda 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001bc4:	649a      	str	r2, [r3, #72]	@ 0x48
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_SPI_MspInit+0x11c>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2105      	movs	r1, #5
 8001bd0:	2023      	movs	r0, #35	@ 0x23
 8001bd2:	f001 f833 	bl	8002c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bd6:	2023      	movs	r0, #35	@ 0x23
 8001bd8:	f001 f84c 	bl	8002c74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	@ 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	200002c4 	.word	0x200002c4
 8001bf4:	40026458 	.word	0x40026458

08001bf8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b08b      	sub	sp, #44	@ 0x2c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a47      	ldr	r2, [pc, #284]	@ (8001d24 <HAL_TIM_Base_MspInit+0x12c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	4b46      	ldr	r3, [pc, #280]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	4a45      	ldr	r2, [pc, #276]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1a:	4b43      	ldr	r3, [pc, #268]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001c26:	e076      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM7)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d2c <HAL_TIM_Base_MspInit+0x134>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	4b3c      	ldr	r3, [pc, #240]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b39      	ldr	r3, [pc, #228]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
}
 8001c4e:	e062      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <HAL_TIM_Base_MspInit+0x138>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a31      	ldr	r2, [pc, #196]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
}
 8001c76:	e04e      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <HAL_TIM_Base_MspInit+0x13c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	4a27      	ldr	r2, [pc, #156]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c92:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
}
 8001c9e:	e03a      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <HAL_TIM_Base_MspInit+0x140>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
}
 8001cc6:	e026      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_TIM_Base_MspInit+0x144>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a13      	ldr	r2, [pc, #76]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
}
 8001cee:	e012      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <HAL_TIM_Base_MspInit+0x148>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_TIM_Base_MspInit+0x130>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	@ 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40001400 	.word	0x40001400
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40014400 	.word	0x40014400
 8001d38:	40014800 	.word	0x40014800
 8001d3c:	40001800 	.word	0x40001800
 8001d40:	40001c00 	.word	0x40001c00

08001d44 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b090      	sub	sp, #64	@ 0x40
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d64:	d14b      	bne.n	8001dfe <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a75      	ldr	r2, [pc, #468]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d86:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	4b68      	ldr	r3, [pc, #416]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a67      	ldr	r2, [pc, #412]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	485c      	ldr	r0, [pc, #368]	@ (8001f48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001dd8:	f001 faf2 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dec:	2301      	movs	r3, #1
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4855      	ldr	r0, [pc, #340]	@ (8001f4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001df8:	f001 fae2 	bl	80033c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001dfc:	e09d      	b.n	8001f3a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a53      	ldr	r2, [pc, #332]	@ (8001f50 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d12c      	bne.n	8001e62 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	4a4c      	ldr	r2, [pc, #304]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e18:	4b4a      	ldr	r3, [pc, #296]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e34:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e40:	2330      	movs	r3, #48	@ 0x30
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e50:	2302      	movs	r3, #2
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e58:	4619      	mov	r1, r3
 8001e5a:	483c      	ldr	r0, [pc, #240]	@ (8001f4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001e5c:	f001 fab0 	bl	80033c0 <HAL_GPIO_Init>
}
 8001e60:	e06b      	b.n	8001f3a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM4)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a3b      	ldr	r2, [pc, #236]	@ (8001f54 <HAL_TIM_Encoder_MspInit+0x210>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d135      	bne.n	8001ed8 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7c:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e98:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ea4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4825      	ldr	r0, [pc, #148]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ec2:	f001 fa7d 	bl	80033c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2105      	movs	r1, #5
 8001eca:	201e      	movs	r0, #30
 8001ecc:	f000 feb6 	bl	8002c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed0:	201e      	movs	r0, #30
 8001ed2:	f000 fecf 	bl	8002c74 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e030      	b.n	8001f3a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <HAL_TIM_Encoder_MspInit+0x218>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d12b      	bne.n	8001f3a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a16      	ldr	r2, [pc, #88]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a0f      	ldr	r2, [pc, #60]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x200>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001f36:	f001 fa43 	bl	80033c0 <HAL_GPIO_Init>
}
 8001f3a:	bf00      	nop
 8001f3c:	3740      	adds	r7, #64	@ 0x40
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40000c00 	.word	0x40000c00

08001f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	@ 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	@ (80020a4 <HAL_TIM_MspPostInit+0x144>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11f      	bne.n	8001fc2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	4b48      	ldr	r3, [pc, #288]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|TIM1_CH2_Pin|TIM1_CH3_Pin|TIM1_CH4_Pin;
 8001f9e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fac:	2302      	movs	r3, #2
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	483c      	ldr	r0, [pc, #240]	@ (80020ac <HAL_TIM_MspPostInit+0x14c>)
 8001fbc:	f001 fa00 	bl	80033c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001fc0:	e06c      	b.n	800209c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80020b0 <HAL_TIM_MspPostInit+0x150>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d11e      	bne.n	800200a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4a34      	ldr	r2, [pc, #208]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fe8:	2360      	movs	r3, #96	@ 0x60
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	482a      	ldr	r0, [pc, #168]	@ (80020ac <HAL_TIM_MspPostInit+0x14c>)
 8002004:	f001 f9dc 	bl	80033c0 <HAL_GPIO_Init>
}
 8002008:	e048      	b.n	800209c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM10)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <HAL_TIM_MspPostInit+0x154>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d11f      	bne.n	8002054 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a22      	ldr	r2, [pc, #136]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002042:	2303      	movs	r3, #3
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	481a      	ldr	r0, [pc, #104]	@ (80020b8 <HAL_TIM_MspPostInit+0x158>)
 800204e:	f001 f9b7 	bl	80033c0 <HAL_GPIO_Init>
}
 8002052:	e023      	b.n	800209c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <HAL_TIM_MspPostInit+0x15c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11e      	bne.n	800209c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_TIM_MspPostInit+0x148>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800207a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800208c:	2303      	movs	r3, #3
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <HAL_TIM_MspPostInit+0x158>)
 8002098:	f001 f992 	bl	80033c0 <HAL_GPIO_Init>
}
 800209c:	bf00      	nop
 800209e:	3730      	adds	r7, #48	@ 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40014400 	.word	0x40014400
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40014800 	.word	0x40014800

080020c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002288 <HAL_UART_MspInit+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d135      	bne.n	800214e <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4b69      	ldr	r3, [pc, #420]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	4a68      	ldr	r2, [pc, #416]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 80020ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f2:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a61      	ldr	r2, [pc, #388]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b5f      	ldr	r3, [pc, #380]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800211a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800212c:	2308      	movs	r3, #8
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4856      	ldr	r0, [pc, #344]	@ (8002290 <HAL_UART_MspInit+0x1d0>)
 8002138:	f001 f942 	bl	80033c0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2105      	movs	r1, #5
 8002140:	2035      	movs	r0, #53	@ 0x35
 8002142:	f000 fd7b 	bl	8002c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002146:	2035      	movs	r0, #53	@ 0x35
 8002148:	f000 fd94 	bl	8002c74 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800214c:	e098      	b.n	8002280 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a50      	ldr	r2, [pc, #320]	@ (8002294 <HAL_UART_MspInit+0x1d4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	f040 8093 	bne.w	8002280 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b48      	ldr	r3, [pc, #288]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b44      	ldr	r3, [pc, #272]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a43      	ldr	r2, [pc, #268]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_UART_MspInit+0x1cc>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8002192:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a4:	2307      	movs	r3, #7
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	483a      	ldr	r0, [pc, #232]	@ (8002298 <HAL_UART_MspInit+0x1d8>)
 80021b0:	f001 f906 	bl	80033c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021b4:	4b39      	ldr	r3, [pc, #228]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021b6:	4a3a      	ldr	r2, [pc, #232]	@ (80022a0 <HAL_UART_MspInit+0x1e0>)
 80021b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c2:	4b36      	ldr	r3, [pc, #216]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ce:	4b33      	ldr	r3, [pc, #204]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d6:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80021e8:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021f6:	4829      	ldr	r0, [pc, #164]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 80021f8:	f000 fd66 	bl	8002cc8 <HAL_DMA_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8002202:	f7ff fab7 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a24      	ldr	r2, [pc, #144]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 800220a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800220c:	4a23      	ldr	r2, [pc, #140]	@ (800229c <HAL_UART_MspInit+0x1dc>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002214:	4a24      	ldr	r2, [pc, #144]	@ (80022a8 <HAL_UART_MspInit+0x1e8>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002218:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 800221a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800221e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002220:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 800222e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002232:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002246:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002248:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800224c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002250:	2200      	movs	r2, #0
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002254:	4813      	ldr	r0, [pc, #76]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002256:	f000 fd37 	bl	8002cc8 <HAL_DMA_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002260:	f7ff fa88 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0f      	ldr	r2, [pc, #60]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
 800226a:	4a0e      	ldr	r2, [pc, #56]	@ (80022a4 <HAL_UART_MspInit+0x1e4>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2105      	movs	r1, #5
 8002274:	2025      	movs	r0, #37	@ 0x25
 8002276:	f000 fce1 	bl	8002c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800227a:	2025      	movs	r0, #37	@ 0x25
 800227c:	f000 fcfa 	bl	8002c74 <HAL_NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	@ 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40005000 	.word	0x40005000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800
 8002294:	40011000 	.word	0x40011000
 8002298:	40020000 	.word	0x40020000
 800229c:	20000bd0 	.word	0x20000bd0
 80022a0:	40026440 	.word	0x40026440
 80022a4:	20000c30 	.word	0x20000c30
 80022a8:	400264b8 	.word	0x400264b8

080022ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	@ 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b33      	ldr	r3, [pc, #204]	@ (8002390 <HAL_InitTick+0xe4>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	4a32      	ldr	r2, [pc, #200]	@ (8002390 <HAL_InitTick+0xe4>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80022cc:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <HAL_InitTick+0xe4>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d8:	f107 0210 	add.w	r2, r7, #16
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 f808 	bl	80042f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022f2:	f001 ffd9 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 80022f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80022f8:	e004      	b.n	8002304 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022fa:	f001 ffd5 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 80022fe:	4603      	mov	r3, r0
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <HAL_InitTick+0xe8>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	0c9b      	lsrs	r3, r3, #18
 800230e:	3b01      	subs	r3, #1
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_InitTick+0xec>)
 8002314:	4a21      	ldr	r2, [pc, #132]	@ (800239c <HAL_InitTick+0xf0>)
 8002316:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <HAL_InitTick+0xec>)
 800231a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800231e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002320:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <HAL_InitTick+0xec>)
 8002322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002324:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <HAL_InitTick+0xec>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <HAL_InitTick+0xec>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_InitTick+0xec>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002338:	4817      	ldr	r0, [pc, #92]	@ (8002398 <HAL_InitTick+0xec>)
 800233a:	f002 fa4d 	bl	80047d8 <HAL_TIM_Base_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11b      	bne.n	8002384 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800234c:	4812      	ldr	r0, [pc, #72]	@ (8002398 <HAL_InitTick+0xec>)
 800234e:	f002 fa9f 	bl	8004890 <HAL_TIM_Base_Start_IT>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002360:	202d      	movs	r0, #45	@ 0x2d
 8002362:	f000 fc87 	bl	8002c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d808      	bhi.n	800237e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	202d      	movs	r0, #45	@ 0x2d
 8002372:	f000 fc63 	bl	8002c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_InitTick+0xf4>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e002      	b.n	8002384 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002388:	4618      	mov	r0, r3
 800238a:	3738      	adds	r7, #56	@ 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	431bde83 	.word	0x431bde83
 8002398:	20000f4c 	.word	0x20000f4c
 800239c:	40002000 	.word	0x40002000
 80023a0:	20000004 	.word	0x20000004

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80023a8:	f001 ffd8 	bl	800435c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <NMI_Handler+0x8>

080023b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <MemManage_Handler+0x4>

080023c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <UsageFault_Handler+0x4>

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <DMA1_Stream2_IRQHandler+0x10>)
 80023e6:	f000 fdaf 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000184 	.word	0x20000184

080023f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <SPI1_IRQHandler+0x10>)
 8002426:	f002 f871 	bl	800450c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000244 	.word	0x20000244

08002434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <USART1_IRQHandler+0x10>)
 800243a:	f003 fc61 	bl	8005d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000b58 	.word	0x20000b58

08002448 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800247a:	f002 fbf9 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000f4c 	.word	0x20000f4c

08002488 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <DMA1_Stream7_IRQHandler+0x10>)
 800248e:	f000 fd5b 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200001e4 	.word	0x200001e4

0800249c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <UART5_IRQHandler+0x10>)
 80024b2:	f003 fc25 	bl	8005d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000ae0 	.word	0x20000ae0

080024c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA2_Stream2_IRQHandler+0x10>)
 80024d6:	f000 fd37 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000bd0 	.word	0x20000bd0

080024e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA2_Stream3_IRQHandler+0x10>)
 80024ea:	f000 fd2d 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200002c4 	.word	0x200002c4

080024f8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <DMA2_Stream7_IRQHandler+0x10>)
 80024fe:	f000 fd23 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000c30 	.word	0x20000c30

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <SystemInit+0x20>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <SystemInit+0x20>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002568 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002534:	f7ff ffea 	bl	800250c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002550:	4c0a      	ldr	r4, [pc, #40]	@ (800257c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255e:	f007 fd13 	bl	8009f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7fd ffd9 	bl	8000518 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002574:	0800a344 	.word	0x0800a344
  ldr r2, =_sbss
 8002578:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800257c:	2000c954 	.word	0x2000c954

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 fb3a 	bl	8002c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f7ff fe7a 	bl	80022ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff f8e2 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008
 80025ec:	20001000 	.word	0x20001000

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20001000 	.word	0x20001000

08002608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e033      	b.n	8002686 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff f8d6 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800264e:	f023 0302 	bic.w	r3, r3, #2
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f93a 	bl	80028d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
 8002676:	e001      	b.n	800267c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1c>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e105      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x228>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d925      	bls.n	8002708 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68d9      	ldr	r1, [r3, #12]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	2207      	movs	r2, #7
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43da      	mvns	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	400a      	ands	r2, r1
 80026e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68d9      	ldr	r1, [r3, #12]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	4603      	mov	r3, r0
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4403      	add	r3, r0
 80026fa:	3b1e      	subs	r3, #30
 80026fc:	409a      	lsls	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e022      	b.n	800274e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6919      	ldr	r1, [r3, #16]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	2207      	movs	r2, #7
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	400a      	ands	r2, r1
 800272a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6919      	ldr	r1, [r3, #16]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	4603      	mov	r3, r0
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4403      	add	r3, r0
 8002744:	409a      	lsls	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b06      	cmp	r3, #6
 8002754:	d824      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b05      	subs	r3, #5
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b05      	subs	r3, #5
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	@ 0x34
 800279e:	e04c      	b.n	800283a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d824      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b23      	subs	r3, #35	@ 0x23
 80027ba:	221f      	movs	r2, #31
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43da      	mvns	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	400a      	ands	r2, r1
 80027c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b23      	subs	r3, #35	@ 0x23
 80027e4:	fa00 f203 	lsl.w	r2, r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80027f0:	e023      	b.n	800283a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b41      	subs	r3, #65	@ 0x41
 8002804:	221f      	movs	r2, #31
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	400a      	ands	r2, r1
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b41      	subs	r3, #65	@ 0x41
 800282e:	fa00 f203 	lsl.w	r2, r0, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283a:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_ADC_ConfigChannel+0x234>)
 800283c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <HAL_ADC_ConfigChannel+0x238>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d109      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1cc>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b12      	cmp	r3, #18
 800284e:	d105      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_ADC_ConfigChannel+0x238>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d123      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d003      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x1e6>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b11      	cmp	r3, #17
 8002874:	d11b      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b10      	cmp	r3, #16
 8002888:	d111      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_ADC_ConfigChannel+0x23c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <HAL_ADC_ConfigChannel+0x240>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9a      	lsrs	r2, r3, #18
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40012300 	.word	0x40012300
 80028c8:	40012000 	.word	0x40012000
 80028cc:	20000000 	.word	0x20000000
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	4b79      	ldr	r3, [pc, #484]	@ (8002ac4 <ADC_Init+0x1f0>)
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800292c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	4a58      	ldr	r2, [pc, #352]	@ (8002ac8 <ADC_Init+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800297a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800299c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	e00f      	b.n	80029d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0202 	bic.w	r2, r2, #2
 80029e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
 80029ec:	005a      	lsls	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	035a      	lsls	r2, r3, #13
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	e007      	b.n	8002a48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	051a      	lsls	r2, r3, #20
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a8a:	025a      	lsls	r2, r3, #9
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	029a      	lsls	r2, r3, #10
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	0f000001 	.word	0x0f000001

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	@ (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	@ (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	@ (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	@ 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff4c 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4e:	f7ff ff61 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f7ff ffb1 	bl	8002bc0 <NVIC_EncodePriority>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff80 	bl	8002b6c <__NVIC_SetPriority>
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff54 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00e      	b.n	8002cc0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	795b      	ldrb	r3, [r3, #5]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fe08 	bl	80018c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff fc8c 	bl	80025f0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e099      	b.n	8002e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d04:	e00f      	b.n	8002d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d06:	f7ff fc73 	bl	80025f0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d908      	bls.n	8002d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e078      	b.n	8002e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e8      	bne.n	8002d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4b38      	ldr	r3, [pc, #224]	@ (8002e20 <HAL_DMA_Init+0x158>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d117      	bne.n	8002dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fa7b 	bl	80032c8 <DMA_CheckFifoParam>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2240      	movs	r2, #64	@ 0x40
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002de6:	2301      	movs	r3, #1
 8002de8:	e016      	b.n	8002e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa32 	bl	800325c <DMA_CalcBaseAndBitshift>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	223f      	movs	r2, #63	@ 0x3f
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	f010803f 	.word	0xf010803f

08002e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e32:	f7ff fbdd 	bl	80025f0 <HAL_GetTick>
 8002e36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d008      	beq.n	8002e56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e052      	b.n	8002efc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0216 	bic.w	r2, r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_DMA_Abort+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea6:	e013      	b.n	8002ed0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea8:	f7ff fba2 	bl	80025f0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e015      	b.n	8002efc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e4      	bne.n	8002ea8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	223f      	movs	r2, #63	@ 0x3f
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d004      	beq.n	8002f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00c      	b.n	8002f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2205      	movs	r2, #5
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f54:	4b8e      	ldr	r3, [pc, #568]	@ (8003190 <HAL_DMA_IRQHandler+0x248>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a8e      	ldr	r2, [pc, #568]	@ (8003194 <HAL_DMA_IRQHandler+0x24c>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f72:	2208      	movs	r2, #8
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	2204      	movs	r2, #4
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	2204      	movs	r2, #4
 800300e:	409a      	lsls	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	2210      	movs	r2, #16
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d043      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03c      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	2210      	movs	r2, #16
 8003044:	409a      	lsls	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d018      	beq.n	800308a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e01f      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
 8003088:	e016      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0208 	bic.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	2220      	movs	r2, #32
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 808f 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8087 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	2220      	movs	r2, #32
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d136      	bne.n	8003160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0216 	bic.w	r2, r2, #22
 8003100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_DMA_IRQHandler+0x1da>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0208 	bic.w	r2, r2, #8
 8003130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	223f      	movs	r2, #63	@ 0x3f
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003152:	2b00      	cmp	r3, #0
 8003154:	d07e      	beq.n	8003254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
        }
        return;
 800315e:	e079      	b.n	8003254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	2b00      	cmp	r3, #0
 8003182:	d031      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
 800318c:	e02c      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000
 8003194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	e01e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d032      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d307      	bcc.n	8003230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_DMA_IRQHandler+0x2cc>
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e000      	b.n	8003256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003254:	bf00      	nop
    }
  }
}
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	3b10      	subs	r3, #16
 800326c:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <DMA_CalcBaseAndBitshift+0x64>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003276:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d909      	bls.n	800329e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	659a      	str	r2, [r3, #88]	@ 0x58
 800329c:	e007      	b.n	80032ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	aaaaaaab 	.word	0xaaaaaaab
 80032c4:	0800a32c 	.word	0x0800a32c

080032c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11f      	bne.n	8003322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d856      	bhi.n	8003396 <DMA_CheckFifoParam+0xce>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <DMA_CheckFifoParam+0x28>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003313 	.word	0x08003313
 80032f8:	08003301 	.word	0x08003301
 80032fc:	08003397 	.word	0x08003397
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d046      	beq.n	800339a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003310:	e043      	b.n	800339a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003316:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800331a:	d140      	bne.n	800339e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003320:	e03d      	b.n	800339e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800332a:	d121      	bne.n	8003370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d837      	bhi.n	80033a2 <DMA_CheckFifoParam+0xda>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <DMA_CheckFifoParam+0x70>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003349 	.word	0x08003349
 800333c:	0800334f 	.word	0x0800334f
 8003340:	08003349 	.word	0x08003349
 8003344:	08003361 	.word	0x08003361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      break;
 800334c:	e030      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d025      	beq.n	80033a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335e:	e022      	b.n	80033a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003368:	d11f      	bne.n	80033aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800336e:	e01c      	b.n	80033aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d903      	bls.n	800337e <DMA_CheckFifoParam+0xb6>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d003      	beq.n	8003384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800337c:	e018      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      break;
 8003382:	e015      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e00b      	b.n	80033ae <DMA_CheckFifoParam+0xe6>
      break;
 8003396:	bf00      	nop
 8003398:	e00a      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
 800339c:	e008      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
 80033a0:	e006      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ae:	bf00      	nop
    }
  } 
  
  return status; 
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e16b      	b.n	80036b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f040 815a 	bne.w	80036ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d005      	beq.n	8003412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340e:	2b02      	cmp	r3, #2
 8003410:	d130      	bne.n	8003474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 0201 	and.w	r2, r3, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d017      	beq.n	80034b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d123      	bne.n	8003504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0203 	and.w	r2, r3, #3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80b4 	beq.w	80036ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b60      	ldr	r3, [pc, #384]	@ (80036cc <HAL_GPIO_Init+0x30c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a5f      	ldr	r2, [pc, #380]	@ (80036cc <HAL_GPIO_Init+0x30c>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
 8003556:	4b5d      	ldr	r3, [pc, #372]	@ (80036cc <HAL_GPIO_Init+0x30c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003562:	4a5b      	ldr	r2, [pc, #364]	@ (80036d0 <HAL_GPIO_Init+0x310>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a52      	ldr	r2, [pc, #328]	@ (80036d4 <HAL_GPIO_Init+0x314>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a51      	ldr	r2, [pc, #324]	@ (80036d8 <HAL_GPIO_Init+0x318>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x222>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a50      	ldr	r2, [pc, #320]	@ (80036dc <HAL_GPIO_Init+0x31c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x21e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	@ (80036e0 <HAL_GPIO_Init+0x320>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x21a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4e      	ldr	r2, [pc, #312]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x216>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4d      	ldr	r2, [pc, #308]	@ (80036e8 <HAL_GPIO_Init+0x328>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x212>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4c      	ldr	r2, [pc, #304]	@ (80036ec <HAL_GPIO_Init+0x32c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	@ (80036f0 <HAL_GPIO_Init+0x330>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x20a>
 80035c6:	2307      	movs	r3, #7
 80035c8:	e00e      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035ca:	2308      	movs	r3, #8
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4935      	ldr	r1, [pc, #212]	@ (80036d0 <HAL_GPIO_Init+0x310>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367e:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a8:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae90 	bls.w	80033dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020800 	.word	0x40020800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021400 	.word	0x40021400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40021c00 	.word	0x40021c00
 80036f4:	40013c00 	.word	0x40013c00

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e12b      	b.n	8003996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe f8da 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800378e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003790:	f000 fd8a 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a81      	ldr	r2, [pc, #516]	@ (80039a0 <HAL_I2C_Init+0x274>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d807      	bhi.n	80037b0 <HAL_I2C_Init+0x84>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a80      	ldr	r2, [pc, #512]	@ (80039a4 <HAL_I2C_Init+0x278>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e006      	b.n	80037be <HAL_I2C_Init+0x92>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a7d      	ldr	r2, [pc, #500]	@ (80039a8 <HAL_I2C_Init+0x27c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e7      	b.n	8003996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a78      	ldr	r2, [pc, #480]	@ (80039ac <HAL_I2C_Init+0x280>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_I2C_Init+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <HAL_I2C_Init+0xd4>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e009      	b.n	8003814 <HAL_I2C_Init+0xe8>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	4a69      	ldr	r2, [pc, #420]	@ (80039b0 <HAL_I2C_Init+0x284>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	3301      	adds	r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003826:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	495c      	ldr	r1, [pc, #368]	@ (80039a0 <HAL_I2C_Init+0x274>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d819      	bhi.n	8003868 <HAL_I2C_Init+0x13c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e59      	subs	r1, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_I2C_Init+0x138>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e59      	subs	r1, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb1 f3f3 	udiv	r3, r1, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	e051      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003864:	2304      	movs	r3, #4
 8003866:	e04f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <HAL_I2C_Init+0x168>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_I2C_Init+0x18e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x196>
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10e      	bne.n	80038e8 <HAL_I2C_Init+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e58      	subs	r0, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	440b      	add	r3, r1
 80038d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	0099      	lsls	r1, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003936:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6911      	ldr	r1, [r2, #16]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000186a0 	.word	0x000186a0
 80039a4:	001e847f 	.word	0x001e847f
 80039a8:	003d08ff 	.word	0x003d08ff
 80039ac:	431bde83 	.word	0x431bde83
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e267      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d075      	beq.n	8003abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d2:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b85      	ldr	r3, [pc, #532]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b82      	ldr	r3, [pc, #520]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e242      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x74>
 8003a1a:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a75      	ldr	r2, [pc, #468]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b70      	ldr	r3, [pc, #448]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	4b69      	ldr	r3, [pc, #420]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a68      	ldr	r2, [pc, #416]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b66      	ldr	r3, [pc, #408]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fdc0 	bl	80025f0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe fdbc 	bl	80025f0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e207      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fdac 	bl	80025f0 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe fda8 	bl	80025f0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1f3      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b51      	ldr	r3, [pc, #324]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aca:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1c7      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4937      	ldr	r1, [pc, #220]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fd61 	bl	80025f0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe fd5d 	bl	80025f0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1a8      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4925      	ldr	r1, [pc, #148]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fd40 	bl	80025f0 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe fd3c 	bl	80025f0 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e187      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe fd20 	bl	80025f0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe fd1c 	bl	80025f0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e167      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x200>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe fd09 	bl	80025f0 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e00e      	b.n	8003c00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fe fd05 	bl	80025f0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d907      	bls.n	8003c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e150      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b88      	ldr	r3, [pc, #544]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8097 	beq.w	8003d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b81      	ldr	r3, [pc, #516]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a7c      	ldr	r2, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b77      	ldr	r3, [pc, #476]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b74      	ldr	r3, [pc, #464]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a73      	ldr	r2, [pc, #460]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fe fcc5 	bl	80025f0 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe fcc1 	bl	80025f0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e10c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2ea>
 8003c90:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a63      	ldr	r2, [pc, #396]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x30c>
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a5e      	ldr	r2, [pc, #376]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003cc0:	4b58      	ldr	r3, [pc, #352]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a57      	ldr	r2, [pc, #348]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	4b55      	ldr	r3, [pc, #340]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	4a54      	ldr	r2, [pc, #336]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fc86 	bl	80025f0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fc82 	bl	80025f0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0cb      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fc70 	bl	80025f0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fc6c 	bl	80025f0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0b5      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	4a38      	ldr	r2, [pc, #224]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a1 	beq.w	8003e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d05c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d141      	bne.n	8003dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fc40 	bl	80025f0 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe fc3c 	bl	80025f0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e087      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	491b      	ldr	r1, [pc, #108]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fc15 	bl	80025f0 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fe fc11 	bl	80025f0 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e05c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x416>
 8003de8:	e054      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe fbfe 	bl	80025f0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe fbfa 	bl	80025f0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e045      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
 8003e16:	e03d      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e038      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d121      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0cc      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b68      	ldr	r3, [pc, #416]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90c      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b65      	ldr	r3, [pc, #404]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a58      	ldr	r2, [pc, #352]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a52      	ldr	r2, [pc, #328]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b3f      	ldr	r3, [pc, #252]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f72:	4b3b      	ldr	r3, [pc, #236]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e067      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b37      	ldr	r3, [pc, #220]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4934      	ldr	r1, [pc, #208]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f94:	f7fe fb2c 	bl	80025f0 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fe fb28 	bl	80025f0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 020c 	and.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1eb      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b25      	ldr	r3, [pc, #148]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20c      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f82d 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	@ (8004064 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f92e 	bl	80022ac <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00
 8004060:	40023800 	.word	0x40023800
 8004064:	0800a314 	.word	0x0800a314
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_RCC_EnableCSS+0x14>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	4247004c 	.word	0x4247004c

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b094      	sub	sp, #80	@ 0x50
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b79      	ldr	r3, [pc, #484]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80e1 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e0db      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b73      	ldr	r3, [pc, #460]	@ (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c0:	e0db      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b72      	ldr	r3, [pc, #456]	@ (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 80040c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c6:	e0d8      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b6a      	ldr	r3, [pc, #424]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040fa:	4622      	mov	r2, r4
 80040fc:	462b      	mov	r3, r5
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410c:	0150      	lsls	r0, r2, #5
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4621      	mov	r1, r4
 8004114:	1a51      	subs	r1, r2, r1
 8004116:	6139      	str	r1, [r7, #16]
 8004118:	4629      	mov	r1, r5
 800411a:	eb63 0301 	sbc.w	r3, r3, r1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800412c:	4659      	mov	r1, fp
 800412e:	018b      	lsls	r3, r1, #6
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004136:	4651      	mov	r1, sl
 8004138:	018a      	lsls	r2, r1, #6
 800413a:	4651      	mov	r1, sl
 800413c:	ebb2 0801 	subs.w	r8, r2, r1
 8004140:	4659      	mov	r1, fp
 8004142:	eb63 0901 	sbc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	462b      	mov	r3, r5
 8004168:	eb49 0303 	adc.w	r3, r9, r3
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800417a:	4629      	mov	r1, r5
 800417c:	028b      	lsls	r3, r1, #10
 800417e:	4621      	mov	r1, r4
 8004180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004184:	4621      	mov	r1, r4
 8004186:	028a      	lsls	r2, r1, #10
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418e:	2200      	movs	r2, #0
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004198:	f7fc f81a 	bl	80001d0 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4613      	mov	r3, r2
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a4:	e058      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b38      	ldr	r3, [pc, #224]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	4611      	mov	r1, r2
 80041b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	2300      	movs	r3, #0
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80041bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	0159      	lsls	r1, r3, #5
 80041ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d2:	0150      	lsls	r0, r2, #5
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4641      	mov	r1, r8
 80041da:	ebb2 0a01 	subs.w	sl, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041f8:	ebb2 040a 	subs.w	r4, r2, sl
 80041fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	00eb      	lsls	r3, r5, #3
 800420a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420e:	00e2      	lsls	r2, r4, #3
 8004210:	4614      	mov	r4, r2
 8004212:	461d      	mov	r5, r3
 8004214:	4643      	mov	r3, r8
 8004216:	18e3      	adds	r3, r4, r3
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	464b      	mov	r3, r9
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800422e:	4629      	mov	r1, r5
 8004230:	028b      	lsls	r3, r1, #10
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004238:	4621      	mov	r1, r4
 800423a:	028a      	lsls	r2, r1, #10
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004242:	2200      	movs	r2, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	61fa      	str	r2, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	f7fb ffc0 	bl	80001d0 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 8004276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800427c:	4618      	mov	r0, r3
 800427e:	3750      	adds	r7, #80	@ 0x50
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a9b      	lsrs	r3, r3, #10
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0800a324 	.word	0x0800a324

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d4:	f7ff ffdc 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0b5b      	lsrs	r3, r3, #13
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4903      	ldr	r1, [pc, #12]	@ (80042f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40023800 	.word	0x40023800
 80042f4:	0800a324 	.word	0x0800a324

080042f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	220f      	movs	r2, #15
 8004306:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <HAL_RCC_GetClockConfig+0x5c>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0203 	and.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <HAL_RCC_GetClockConfig+0x5c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <HAL_RCC_GetClockConfig+0x60>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0207 	and.w	r2, r3, #7
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	40023c00 	.word	0x40023c00

0800435c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d104      	bne.n	8004376 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800436c:	f000 f80a 	bl	8004384 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004372:	2280      	movs	r2, #128	@ 0x80
 8004374:	701a      	strb	r2, [r3, #0]
  }
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	4002380e 	.word	0x4002380e

08004384 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e09b      	b.n	80044de <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043b6:	d009      	beq.n	80043cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
 80043be:	e005      	b.n	80043cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d126      	bne.n	800442c <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a3f      	ldr	r2, [pc, #252]	@ (80044e8 <HAL_SPI_Init+0x154>)
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <HAL_SPI_Init+0x158>)
 80043f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a3e      	ldr	r2, [pc, #248]	@ (80044f0 <HAL_SPI_Init+0x15c>)
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3e      	ldr	r2, [pc, #248]	@ (80044f4 <HAL_SPI_Init+0x160>)
 80043fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a3d      	ldr	r2, [pc, #244]	@ (80044f8 <HAL_SPI_Init+0x164>)
 8004402:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3d      	ldr	r2, [pc, #244]	@ (80044fc <HAL_SPI_Init+0x168>)
 8004408:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a3c      	ldr	r2, [pc, #240]	@ (8004500 <HAL_SPI_Init+0x16c>)
 800440e:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <HAL_SPI_Init+0x170>)
 8004414:	675a      	str	r2, [r3, #116]	@ 0x74

    if (hspi->MspInitCallback == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a39      	ldr	r2, [pc, #228]	@ (8004508 <HAL_SPI_Init+0x174>)
 8004422:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	ea42 0103 	orr.w	r1, r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	f003 0104 	and.w	r1, r3, #4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	f003 0210 	and.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800470d 	.word	0x0800470d
 80044ec:	08004721 	.word	0x08004721
 80044f0:	08004735 	.word	0x08004735
 80044f4:	08004749 	.word	0x08004749
 80044f8:	0800475d 	.word	0x0800475d
 80044fc:	08004771 	.word	0x08004771
 8004500:	08004785 	.word	0x08004785
 8004504:	08004799 	.word	0x08004799
 8004508:	08001ad5 	.word	0x08001ad5

0800450c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
    return;
 800454e:	e0d8      	b.n	8004702 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_SPI_IRQHandler+0x66>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
    return;
 8004570:	e0c7      	b.n	8004702 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_SPI_IRQHandler+0x8c>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80b5 	beq.w	8004702 <HAL_SPI_IRQHandler+0x1f6>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80ae 	beq.w	8004702 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d023      	beq.n	80045fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d011      	beq.n	80045e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f043 0204 	orr.w	r2, r3, #4
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	e00b      	b.n	80045fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
        return;
 80045f8:	e083      	b.n	8004702 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d014      	beq.n	8004630 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00c      	beq.n	8004656 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	f043 0208 	orr.w	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465a:	2b00      	cmp	r3, #0
 800465c:	d050      	beq.n	8004700 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800466c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_SPI_IRQHandler+0x17e>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d034      	beq.n	80046f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0203 	bic.w	r2, r2, #3
 8004698:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d011      	beq.n	80046c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_SPI_IRQHandler+0x1fc>)
 80046a8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fc28 	bl	8002f04 <HAL_DMA_Abort_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d017      	beq.n	80046fe <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <HAL_SPI_IRQHandler+0x1fc>)
 80046d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fc12 	bl	8002f04 <HAL_DMA_Abort_IT>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80046f2:	e004      	b.n	80046fe <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046fc:	e000      	b.n	8004700 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80046fe:	bf00      	nop
    return;
 8004700:	bf00      	nop
  }
}
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	080047ad 	.word	0x080047ad

0800470c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e04c      	b.n	8004884 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d111      	bne.n	800481a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 f876 	bl	80058f0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a1f      	ldr	r2, [pc, #124]	@ (800488c <HAL_TIM_Base_Init+0xb4>)
 8004810:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 fd6f 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	08001bf9 	.word	0x08001bf9

08004890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d001      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e04e      	b.n	8004946 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	@ (8004954 <HAL_TIM_Base_Start_IT+0xc4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d01d      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_TIM_Base_Start_IT+0xc8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_TIM_Base_Start_IT+0xcc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <HAL_TIM_Base_Start_IT+0xd4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <HAL_TIM_Base_Start_IT+0xd8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a18      	ldr	r2, [pc, #96]	@ (800496c <HAL_TIM_Base_Start_IT+0xdc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d111      	bne.n	8004934 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d010      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e007      	b.n	8004944 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40001800 	.word	0x40001800

08004970 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e04c      	b.n	8004a1c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d111      	bne.n	80049b2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ffaa 	bl	80058f0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <HAL_TIM_OC_Init+0xb4>)
 80049a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fca3 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08004a29 	.word	0x08004a29

08004a28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e04c      	b.n	8004ae8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d111      	bne.n	8004a7e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 ff44 	bl	80058f0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_TIM_PWM_Init+0xb4>)
 8004a74:	661a      	str	r2, [r3, #96]	@ 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f000 fc3d 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08004af5 	.word	0x08004af5

08004af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0a2      	b.n	8004c62 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d111      	bne.n	8004b4c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fedd 	bl	80058f0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4a      	ldr	r2, [pc, #296]	@ (8004c6c <HAL_TIM_Encoder_Init+0x164>)
 8004b42:	671a      	str	r2, [r3, #112]	@ 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fbcc 	bl	8005310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004bbe:	f023 030c 	bic.w	r3, r3, #12
 8004bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	011a      	lsls	r2, r3, #4
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bfc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	4313      	orrs	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08001d45 	.word	0x08001d45

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d026      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d021      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0202 	mvn.w	r2, #2
 8004ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e009      	b.n	8004cda <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d026      	beq.n	8004d38 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d021      	beq.n	8004d38 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	e009      	b.n	8004d32 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d026      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d021      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0208 	mvn.w	r2, #8
 8004d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	e009      	b.n	8004d8a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d026      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d021      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	e009      	b.n	8004de2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0201 	mvn.w	r2, #1
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0220 	mvn.w	r2, #32
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e048      	b.n	8004f40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d839      	bhi.n	8004f30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f15 	.word	0x08004f15
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f31 	.word	0x08004f31
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f23 	.word	0x08004f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 faac 	bl	800545c <TIM_OC1_SetConfig>
      break;
 8004f04:	e017      	b.n	8004f36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fb15 	bl	800553c <TIM_OC2_SetConfig>
      break;
 8004f12:	e010      	b.n	8004f36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb84 	bl	8005628 <TIM_OC3_SetConfig>
      break;
 8004f20:	e009      	b.n	8004f36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fbf1 	bl	8005710 <TIM_OC4_SetConfig>
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0ae      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	f200 809f 	bhi.w	80050b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	080050b5 	.word	0x080050b5
 8004f84:	080050b5 	.word	0x080050b5
 8004f88:	080050b5 	.word	0x080050b5
 8004f8c:	08004ff1 	.word	0x08004ff1
 8004f90:	080050b5 	.word	0x080050b5
 8004f94:	080050b5 	.word	0x080050b5
 8004f98:	080050b5 	.word	0x080050b5
 8004f9c:	08005033 	.word	0x08005033
 8004fa0:	080050b5 	.word	0x080050b5
 8004fa4:	080050b5 	.word	0x080050b5
 8004fa8:	080050b5 	.word	0x080050b5
 8004fac:	08005073 	.word	0x08005073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa50 	bl	800545c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0208 	orr.w	r2, r2, #8
 8004fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0204 	bic.w	r2, r2, #4
 8004fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6999      	ldr	r1, [r3, #24]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	619a      	str	r2, [r3, #24]
      break;
 8004fee:	e064      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 faa0 	bl	800553c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800500a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6999      	ldr	r1, [r3, #24]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	619a      	str	r2, [r3, #24]
      break;
 8005030:	e043      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 faf5 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0208 	orr.w	r2, r2, #8
 800504c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0204 	bic.w	r2, r2, #4
 800505c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	61da      	str	r2, [r3, #28]
      break;
 8005070:	e023      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fb49 	bl	8005710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800509c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69d9      	ldr	r1, [r3, #28]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	021a      	lsls	r2, r3, #8
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	61da      	str	r2, [r3, #28]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	75fb      	strb	r3, [r7, #23]
      break;
 80050b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_ConfigClockSource+0x1c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e0b4      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x186>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800510e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005120:	d03e      	beq.n	80051a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005126:	f200 8087 	bhi.w	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512e:	f000 8086 	beq.w	800523e <HAL_TIM_ConfigClockSource+0x172>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005136:	d87f      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b70      	cmp	r3, #112	@ 0x70
 800513a:	d01a      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0xa6>
 800513c:	2b70      	cmp	r3, #112	@ 0x70
 800513e:	d87b      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005140:	2b60      	cmp	r3, #96	@ 0x60
 8005142:	d050      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005144:	2b60      	cmp	r3, #96	@ 0x60
 8005146:	d877      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005148:	2b50      	cmp	r3, #80	@ 0x50
 800514a:	d03c      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0xfa>
 800514c:	2b50      	cmp	r3, #80	@ 0x50
 800514e:	d873      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005150:	2b40      	cmp	r3, #64	@ 0x40
 8005152:	d058      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x13a>
 8005154:	2b40      	cmp	r3, #64	@ 0x40
 8005156:	d86f      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	2b30      	cmp	r3, #48	@ 0x30
 800515a:	d064      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x15a>
 800515c:	2b30      	cmp	r3, #48	@ 0x30
 800515e:	d86b      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d060      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x15a>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d867      	bhi.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05c      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x15a>
 800516c:	2b10      	cmp	r3, #16
 800516e:	d05a      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	e062      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005182:	f000 fb95 	bl	80058b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	609a      	str	r2, [r3, #8]
      break;
 800519e:	e04f      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b0:	f000 fb7e 	bl	80058b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051c2:	609a      	str	r2, [r3, #8]
      break;
 80051c4:	e03c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d2:	461a      	mov	r2, r3
 80051d4:	f000 faf2 	bl	80057bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2150      	movs	r1, #80	@ 0x50
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fb4b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 80051e4:	e02c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f2:	461a      	mov	r2, r3
 80051f4:	f000 fb11 	bl	800581a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2160      	movs	r1, #96	@ 0x60
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fb3b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005204:	e01c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	461a      	mov	r2, r3
 8005214:	f000 fad2 	bl	80057bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2140      	movs	r1, #64	@ 0x40
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fb2b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005224:	e00c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f000 fb22 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005236:	e003      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
      break;
 800523c:	e000      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800523e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <TIM_Base_SetConfig+0x120>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532e:	d00f      	beq.n	8005350 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a40      	ldr	r2, [pc, #256]	@ (8005434 <TIM_Base_SetConfig+0x124>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00b      	beq.n	8005350 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a3f      	ldr	r2, [pc, #252]	@ (8005438 <TIM_Base_SetConfig+0x128>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a3e      	ldr	r2, [pc, #248]	@ (800543c <TIM_Base_SetConfig+0x12c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3d      	ldr	r2, [pc, #244]	@ (8005440 <TIM_Base_SetConfig+0x130>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a32      	ldr	r2, [pc, #200]	@ (8005430 <TIM_Base_SetConfig+0x120>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d02b      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005370:	d027      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2f      	ldr	r2, [pc, #188]	@ (8005434 <TIM_Base_SetConfig+0x124>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d023      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2e      	ldr	r2, [pc, #184]	@ (8005438 <TIM_Base_SetConfig+0x128>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01f      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2d      	ldr	r2, [pc, #180]	@ (800543c <TIM_Base_SetConfig+0x12c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01b      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <TIM_Base_SetConfig+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d017      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2b      	ldr	r2, [pc, #172]	@ (8005444 <TIM_Base_SetConfig+0x134>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2a      	ldr	r2, [pc, #168]	@ (8005448 <TIM_Base_SetConfig+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a29      	ldr	r2, [pc, #164]	@ (800544c <TIM_Base_SetConfig+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a28      	ldr	r2, [pc, #160]	@ (8005450 <TIM_Base_SetConfig+0x140>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a27      	ldr	r2, [pc, #156]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a26      	ldr	r2, [pc, #152]	@ (8005458 <TIM_Base_SetConfig+0x148>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d108      	bne.n	80053d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005430 <TIM_Base_SetConfig+0x120>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0xf2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a10      	ldr	r2, [pc, #64]	@ (8005440 <TIM_Base_SetConfig+0x130>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d103      	bne.n	800540a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800
 8005450:	40001800 	.word	0x40001800
 8005454:	40001c00 	.word	0x40001c00
 8005458:	40002000 	.word	0x40002000

0800545c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 0201 	bic.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 0302 	bic.w	r3, r3, #2
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a20      	ldr	r2, [pc, #128]	@ (8005534 <TIM_OC1_SetConfig+0xd8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC1_SetConfig+0x64>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005538 <TIM_OC1_SetConfig+0xdc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10c      	bne.n	80054da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0308 	bic.w	r3, r3, #8
 80054c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 0304 	bic.w	r3, r3, #4
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <TIM_OC1_SetConfig+0xd8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC1_SetConfig+0x8e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <TIM_OC1_SetConfig+0xdc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 0210 	bic.w	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a22      	ldr	r2, [pc, #136]	@ (8005620 <TIM_OC2_SetConfig+0xe4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC2_SetConfig+0x68>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a21      	ldr	r2, [pc, #132]	@ (8005624 <TIM_OC2_SetConfig+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <TIM_OC2_SetConfig+0xe4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC2_SetConfig+0x94>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <TIM_OC2_SetConfig+0xe8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d113      	bne.n	80055f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40010400 	.word	0x40010400

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a21      	ldr	r2, [pc, #132]	@ (8005708 <TIM_OC3_SetConfig+0xe0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC3_SetConfig+0x66>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a20      	ldr	r2, [pc, #128]	@ (800570c <TIM_OC3_SetConfig+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10d      	bne.n	80056aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a16      	ldr	r2, [pc, #88]	@ (8005708 <TIM_OC3_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x92>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a15      	ldr	r2, [pc, #84]	@ (800570c <TIM_OC3_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d113      	bne.n	80056e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	621a      	str	r2, [r3, #32]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800575a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a12      	ldr	r2, [pc, #72]	@ (80057b4 <TIM_OC4_SetConfig+0xa4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC4_SetConfig+0x68>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <TIM_OC4_SetConfig+0xa8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d109      	bne.n	800578c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800577e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 030a 	bic.w	r3, r3, #10
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	f043 0307 	orr.w	r3, r3, #7
 800589c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <TIM_ResetCallback+0x7c>)
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1b      	ldr	r2, [pc, #108]	@ (8005970 <TIM_ResetCallback+0x80>)
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a1a      	ldr	r2, [pc, #104]	@ (8005974 <TIM_ResetCallback+0x84>)
 800590c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <TIM_ResetCallback+0x88>)
 8005914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <TIM_ResetCallback+0x8c>)
 800591c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <TIM_ResetCallback+0x90>)
 8005924:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_ResetCallback+0x94>)
 800592c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <TIM_ResetCallback+0x98>)
 8005934:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a14      	ldr	r2, [pc, #80]	@ (800598c <TIM_ResetCallback+0x9c>)
 800593c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <TIM_ResetCallback+0xa0>)
 8005944:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <TIM_ResetCallback+0xa4>)
 800594c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a11      	ldr	r2, [pc, #68]	@ (8005998 <TIM_ResetCallback+0xa8>)
 8005954:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a10      	ldr	r2, [pc, #64]	@ (800599c <TIM_ResetCallback+0xac>)
 800595c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	08001751 	.word	0x08001751
 8005970:	0800525b 	.word	0x0800525b
 8005974:	080052d3 	.word	0x080052d3
 8005978:	080052e7 	.word	0x080052e7
 800597c:	08005283 	.word	0x08005283
 8005980:	08005297 	.word	0x08005297
 8005984:	0800526f 	.word	0x0800526f
 8005988:	080052ab 	.word	0x080052ab
 800598c:	080052bf 	.word	0x080052bf
 8005990:	080052fb 	.word	0x080052fb
 8005994:	08005b3d 	.word	0x08005b3d
 8005998:	08005b51 	.word	0x08005b51
 800599c:	08005b65 	.word	0x08005b65

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e05a      	b.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a21      	ldr	r2, [pc, #132]	@ (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a04:	d01d      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a18      	ldr	r2, [pc, #96]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10c      	bne.n	8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40001800 	.word	0x40001800

08005a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e03d      	b.n	8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e04d      	b.n	8005c26 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d111      	bne.n	8005bba <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fbbc 	bl	800631c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <HAL_UART_Init+0xb8>)
 8005bb0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2224      	movs	r2, #36	@ 0x24
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fd78 	bl	80066c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005be6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	080020c1 	.word	0x080020c1

08005c34 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e055      	b.n	8005cf2 <HAL_HalfDuplex_Init+0xbe>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d111      	bne.n	8005c76 <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fb5e 	bl	800631c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a24      	ldr	r2, [pc, #144]	@ (8005cfc <HAL_HalfDuplex_Init+0xc8>)
 8005c6c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2224      	movs	r2, #36	@ 0x24
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fd1a 	bl	80066c8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ca2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005cb2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0208 	orr.w	r2, r2, #8
 8005cc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	080020c1 	.word	0x080020c1

08005d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b0ba      	sub	sp, #232	@ 0xe8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_UART_IRQHandler+0x66>
 8005d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fbf2 	bl	8006548 <UART_Receive_IT>
      return;
 8005d64:	e27a      	b.n	800625c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80e1 	beq.w	8005f32 <HAL_UART_IRQHandler+0x232>
 8005d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80d4 	beq.w	8005f32 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0xae>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xd2>
 8005dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f043 0202 	orr.w	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xf6>
 8005dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0204 	orr.w	r2, r3, #4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <HAL_UART_IRQHandler+0x126>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	f043 0208 	orr.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8211 	beq.w	8006252 <HAL_UART_IRQHandler+0x552>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_UART_IRQHandler+0x14e>
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fb7d 	bl	8006548 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e58:	2b40      	cmp	r3, #64	@ 0x40
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2301      	moveq	r3, #1
 8005e5e:	2300      	movne	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <HAL_UART_IRQHandler+0x17a>
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d051      	beq.n	8005f1e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa86 	bl	800638c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d142      	bne.n	8005f14 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1d9      	bne.n	8005e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d013      	beq.n	8005f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee6:	4a8d      	ldr	r2, [pc, #564]	@ (800611c <HAL_UART_IRQHandler+0x41c>)
 8005ee8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd f808 	bl	8002f04 <HAL_DMA_Abort_IT>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d019      	beq.n	8005f2e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	e011      	b.n	8005f2e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	e00c      	b.n	8005f2e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e007      	b.n	8005f2e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f2c:	e191      	b.n	8006252 <HAL_UART_IRQHandler+0x552>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2e:	bf00      	nop
    return;
 8005f30:	e18f      	b.n	8006252 <HAL_UART_IRQHandler+0x552>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	f040 816b 	bne.w	8006212 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8164 	beq.w	8006212 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 815d 	beq.w	8006212 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	f040 80d1 	bne.w	8006120 <HAL_UART_IRQHandler+0x420>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80aa 	beq.w	80060e8 <HAL_UART_IRQHandler+0x3e8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	f080 80a3 	bcs.w	80060e8 <HAL_UART_IRQHandler+0x3e8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb4:	f000 8088 	beq.w	80060c8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fe4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ff0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1d9      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006028:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800602c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006030:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800603a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e1      	bne.n	8006004 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006064:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006066:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800606a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e3      	bne.n	8006040 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006098:	f023 0310 	bic.w	r3, r3, #16
 800609c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e3      	bne.n	8006086 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fc feae 	bl	8002e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80060da:	b292      	uxth	r2, r2
 80060dc:	1a8a      	subs	r2, r1, r2
 80060de:	b292      	uxth	r2, r2
 80060e0:	4611      	mov	r1, r2
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80060e6:	e0b6      	b.n	8006256 <HAL_UART_IRQHandler+0x556>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060f0:	429a      	cmp	r2, r3
 80060f2:	f040 80b0 	bne.w	8006256 <HAL_UART_IRQHandler+0x556>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006100:	f040 80a9 	bne.w	8006256 <HAL_UART_IRQHandler+0x556>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34
            huart->RxEventCallback(huart, huart->RxXferSize);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8006112:	4611      	mov	r1, r2
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
      return;
 8006118:	e09d      	b.n	8006256 <HAL_UART_IRQHandler+0x556>
 800611a:	bf00      	nop
 800611c:	08006453 	.word	0x08006453
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006128:	b29b      	uxth	r3, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 808f 	beq.w	800625a <HAL_UART_IRQHandler+0x55a>
          && (nb_rx_data > 0U))
 800613c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 808a 	beq.w	800625a <HAL_UART_IRQHandler+0x55a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800615c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800616a:	647a      	str	r2, [r7, #68]	@ 0x44
 800616c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x446>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	623b      	str	r3, [r7, #32]
   return(result);
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x47e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	69b9      	ldr	r1, [r7, #24]
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	617b      	str	r3, [r7, #20]
   return(result);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e3      	bne.n	80061c4 <HAL_UART_IRQHandler+0x4c4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006206:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800620a:	4611      	mov	r1, r2
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006210:	e023      	b.n	800625a <HAL_UART_IRQHandler+0x55a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_UART_IRQHandler+0x532>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_UART_IRQHandler+0x532>
  {
    UART_Transmit_IT(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f923 	bl	8006476 <UART_Transmit_IT>
    return;
 8006230:	e014      	b.n	800625c <HAL_UART_IRQHandler+0x55c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <HAL_UART_IRQHandler+0x55c>
 800623e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f963 	bl	8006516 <UART_EndTransmit_IT>
    return;
 8006250:	e004      	b.n	800625c <HAL_UART_IRQHandler+0x55c>
    return;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_UART_IRQHandler+0x55c>
      return;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_UART_IRQHandler+0x55c>
      return;
 800625a:	bf00      	nop
  }
}
 800625c:	37e8      	adds	r7, #232	@ 0xe8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a10      	ldr	r2, [pc, #64]	@ (8006368 <UART_InitCallbacksToDefault+0x4c>)
 8006328:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a0f      	ldr	r2, [pc, #60]	@ (800636c <UART_InitCallbacksToDefault+0x50>)
 800632e:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0f      	ldr	r2, [pc, #60]	@ (8006370 <UART_InitCallbacksToDefault+0x54>)
 8006334:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a0e      	ldr	r2, [pc, #56]	@ (8006374 <UART_InitCallbacksToDefault+0x58>)
 800633a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0e      	ldr	r2, [pc, #56]	@ (8006378 <UART_InitCallbacksToDefault+0x5c>)
 8006340:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a0d      	ldr	r2, [pc, #52]	@ (800637c <UART_InitCallbacksToDefault+0x60>)
 8006346:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a0d      	ldr	r2, [pc, #52]	@ (8006380 <UART_InitCallbacksToDefault+0x64>)
 800634c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a0c      	ldr	r2, [pc, #48]	@ (8006384 <UART_InitCallbacksToDefault+0x68>)
 8006352:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0c      	ldr	r2, [pc, #48]	@ (8006388 <UART_InitCallbacksToDefault+0x6c>)
 8006358:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	08006279 	.word	0x08006279
 800636c:	08006265 	.word	0x08006265
 8006370:	080062a1 	.word	0x080062a1
 8006374:	0800628d 	.word	0x0800628d
 8006378:	080062b5 	.word	0x080062b5
 800637c:	080062c9 	.word	0x080062c9
 8006380:	080062dd 	.word	0x080062dd
 8006384:	080062f1 	.word	0x080062f1
 8006388:	08006305 	.word	0x08006305

0800638c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b095      	sub	sp, #84	@ 0x54
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e5      	bne.n	8006394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f023 0301 	bic.w	r3, r3, #1
 80063de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e5      	bne.n	80063c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006400:	2b01      	cmp	r3, #1
 8006402:	d119      	bne.n	8006438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	60bb      	str	r3, [r7, #8]
   return(result);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	647b      	str	r3, [r7, #68]	@ 0x44
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006424:	61ba      	str	r2, [r7, #24]
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6979      	ldr	r1, [r7, #20]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	613b      	str	r3, [r7, #16]
   return(result);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006446:	bf00      	nop
 8006448:	3754      	adds	r7, #84	@ 0x54
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	85da      	strh	r2, [r3, #46]	@ 0x2e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b21      	cmp	r3, #33	@ 0x21
 8006488:	d13e      	bne.n	8006508 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006492:	d114      	bne.n	80064be <UART_Transmit_IT+0x48>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d110      	bne.n	80064be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	621a      	str	r2, [r3, #32]
 80064bc:	e008      	b.n	80064d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6211      	str	r1, [r2, #32]
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4619      	mov	r1, r3
 80064de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10f      	bne.n	8006504 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006502:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e000      	b.n	800650a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800652c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08c      	sub	sp, #48	@ 0x30
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b22      	cmp	r3, #34	@ 0x22
 8006562:	f040 80ac 	bne.w	80066be <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656e:	d115      	bne.n	800659c <UART_Receive_IT+0x54>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d111      	bne.n	800659c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658a:	b29a      	uxth	r2, r3
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	1c9a      	adds	r2, r3, #2
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	629a      	str	r2, [r3, #40]	@ 0x28
 800659a:	e024      	b.n	80065e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065aa:	d007      	beq.n	80065bc <UART_Receive_IT+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <UART_Receive_IT+0x82>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e008      	b.n	80065dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4619      	mov	r1, r3
 80065f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d15f      	bne.n	80066ba <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0220 	bic.w	r2, r2, #32
 8006608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	2b01      	cmp	r3, #1
 800663e:	d136      	bne.n	80066ae <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	613b      	str	r3, [r7, #16]
   return(result);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f023 0310 	bic.w	r3, r3, #16
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006666:	623a      	str	r2, [r7, #32]
 8006668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	61bb      	str	r3, [r7, #24]
   return(result);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d10a      	bne.n	800669e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80066a6:	4611      	mov	r1, r2
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e003      	b.n	80066b6 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e002      	b.n	80066c0 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	@ 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066cc:	b0c0      	sub	sp, #256	@ 0x100
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	68d9      	ldr	r1, [r3, #12]
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	ea40 0301 	orr.w	r3, r0, r1
 80066f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	431a      	orrs	r2, r3
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006720:	f021 010c 	bic.w	r1, r1, #12
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800672e:	430b      	orrs	r3, r1
 8006730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006742:	6999      	ldr	r1, [r3, #24]
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	ea40 0301 	orr.w	r3, r0, r1
 800674e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b8f      	ldr	r3, [pc, #572]	@ (8006994 <UART_SetConfig+0x2cc>)
 8006758:	429a      	cmp	r2, r3
 800675a:	d005      	beq.n	8006768 <UART_SetConfig+0xa0>
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b8d      	ldr	r3, [pc, #564]	@ (8006998 <UART_SetConfig+0x2d0>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d104      	bne.n	8006772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fd fdb2 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 800676c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006770:	e003      	b.n	800677a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fd fd99 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006776:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006784:	f040 810c 	bne.w	80069a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006792:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	1891      	adds	r1, r2, r2
 80067a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067a2:	415b      	adcs	r3, r3
 80067a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067aa:	4621      	mov	r1, r4
 80067ac:	eb12 0801 	adds.w	r8, r2, r1
 80067b0:	4629      	mov	r1, r5
 80067b2:	eb43 0901 	adc.w	r9, r3, r1
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	eb18 0303 	adds.w	r3, r8, r3
 80067d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067d8:	462b      	mov	r3, r5
 80067da:	eb49 0303 	adc.w	r3, r9, r3
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067f6:	460b      	mov	r3, r1
 80067f8:	18db      	adds	r3, r3, r3
 80067fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80067fc:	4613      	mov	r3, r2
 80067fe:	eb42 0303 	adc.w	r3, r2, r3
 8006802:	657b      	str	r3, [r7, #84]	@ 0x54
 8006804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800680c:	f7f9 fce0 	bl	80001d0 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4b61      	ldr	r3, [pc, #388]	@ (800699c <UART_SetConfig+0x2d4>)
 8006816:	fba3 2302 	umull	r2, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	011c      	lsls	r4, r3, #4
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006828:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800682c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	1891      	adds	r1, r2, r2
 8006836:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006838:	415b      	adcs	r3, r3
 800683a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800683c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006840:	4641      	mov	r1, r8
 8006842:	eb12 0a01 	adds.w	sl, r2, r1
 8006846:	4649      	mov	r1, r9
 8006848:	eb43 0b01 	adc.w	fp, r3, r1
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800685c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006860:	4692      	mov	sl, r2
 8006862:	469b      	mov	fp, r3
 8006864:	4643      	mov	r3, r8
 8006866:	eb1a 0303 	adds.w	r3, sl, r3
 800686a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800686e:	464b      	mov	r3, r9
 8006870:	eb4b 0303 	adc.w	r3, fp, r3
 8006874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006884:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800688c:	460b      	mov	r3, r1
 800688e:	18db      	adds	r3, r3, r3
 8006890:	643b      	str	r3, [r7, #64]	@ 0x40
 8006892:	4613      	mov	r3, r2
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	647b      	str	r3, [r7, #68]	@ 0x44
 800689a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800689e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068a2:	f7f9 fc95 	bl	80001d0 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	4b3b      	ldr	r3, [pc, #236]	@ (800699c <UART_SetConfig+0x2d4>)
 80068ae:	fba3 2301 	umull	r2, r3, r3, r1
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2264      	movs	r2, #100	@ 0x64
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	1acb      	subs	r3, r1, r3
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068c2:	4b36      	ldr	r3, [pc, #216]	@ (800699c <UART_SetConfig+0x2d4>)
 80068c4:	fba3 2302 	umull	r2, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068d0:	441c      	add	r4, r3
 80068d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	1891      	adds	r1, r2, r2
 80068ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068ec:	415b      	adcs	r3, r3
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068f4:	4641      	mov	r1, r8
 80068f6:	1851      	adds	r1, r2, r1
 80068f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80068fa:	4649      	mov	r1, r9
 80068fc:	414b      	adcs	r3, r1
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800690c:	4659      	mov	r1, fp
 800690e:	00cb      	lsls	r3, r1, #3
 8006910:	4651      	mov	r1, sl
 8006912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006916:	4651      	mov	r1, sl
 8006918:	00ca      	lsls	r2, r1, #3
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	4603      	mov	r3, r0
 8006920:	4642      	mov	r2, r8
 8006922:	189b      	adds	r3, r3, r2
 8006924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006928:	464b      	mov	r3, r9
 800692a:	460a      	mov	r2, r1
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006940:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006948:	460b      	mov	r3, r1
 800694a:	18db      	adds	r3, r3, r3
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800694e:	4613      	mov	r3, r2
 8006950:	eb42 0303 	adc.w	r3, r2, r3
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800695a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800695e:	f7f9 fc37 	bl	80001d0 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <UART_SetConfig+0x2d4>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	@ 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	3332      	adds	r3, #50	@ 0x32
 800697a:	4a08      	ldr	r2, [pc, #32]	@ (800699c <UART_SetConfig+0x2d4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 0207 	and.w	r2, r3, #7
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4422      	add	r2, r4
 800698e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006990:	e106      	b.n	8006ba0 <UART_SetConfig+0x4d8>
 8006992:	bf00      	nop
 8006994:	40011000 	.word	0x40011000
 8006998:	40011400 	.word	0x40011400
 800699c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069b2:	4642      	mov	r2, r8
 80069b4:	464b      	mov	r3, r9
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	6239      	str	r1, [r7, #32]
 80069ba:	415b      	adcs	r3, r3
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069c2:	4641      	mov	r1, r8
 80069c4:	1854      	adds	r4, r2, r1
 80069c6:	4649      	mov	r1, r9
 80069c8:	eb43 0501 	adc.w	r5, r3, r1
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	00eb      	lsls	r3, r5, #3
 80069d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069da:	00e2      	lsls	r2, r4, #3
 80069dc:	4614      	mov	r4, r2
 80069de:	461d      	mov	r5, r3
 80069e0:	4643      	mov	r3, r8
 80069e2:	18e3      	adds	r3, r4, r3
 80069e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069e8:	464b      	mov	r3, r9
 80069ea:	eb45 0303 	adc.w	r3, r5, r3
 80069ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a0e:	4629      	mov	r1, r5
 8006a10:	008b      	lsls	r3, r1, #2
 8006a12:	4621      	mov	r1, r4
 8006a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a18:	4621      	mov	r1, r4
 8006a1a:	008a      	lsls	r2, r1, #2
 8006a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a20:	f7f9 fbd6 	bl	80001d0 <__aeabi_uldivmod>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4b60      	ldr	r3, [pc, #384]	@ (8006bac <UART_SetConfig+0x4e4>)
 8006a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	011c      	lsls	r4, r3, #4
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	61b9      	str	r1, [r7, #24]
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a54:	4641      	mov	r1, r8
 8006a56:	1851      	adds	r1, r2, r1
 8006a58:	6139      	str	r1, [r7, #16]
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	414b      	adcs	r3, r1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	00cb      	lsls	r3, r1, #3
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a76:	4651      	mov	r1, sl
 8006a78:	00ca      	lsls	r2, r1, #3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4642      	mov	r2, r8
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a88:	464b      	mov	r3, r9
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006aac:	4649      	mov	r1, r9
 8006aae:	008b      	lsls	r3, r1, #2
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	008a      	lsls	r2, r1, #2
 8006aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006abe:	f7f9 fb87 	bl	80001d0 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4b38      	ldr	r3, [pc, #224]	@ (8006bac <UART_SetConfig+0x4e4>)
 8006aca:	fba3 2301 	umull	r2, r3, r3, r1
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	2264      	movs	r2, #100	@ 0x64
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	1acb      	subs	r3, r1, r3
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	3332      	adds	r3, #50	@ 0x32
 8006adc:	4a33      	ldr	r2, [pc, #204]	@ (8006bac <UART_SetConfig+0x4e4>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ae8:	441c      	add	r4, r3
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006af2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	1891      	adds	r1, r2, r2
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	415b      	adcs	r3, r3
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b08:	4641      	mov	r1, r8
 8006b0a:	1851      	adds	r1, r2, r1
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	4649      	mov	r1, r9
 8006b10:	414b      	adcs	r3, r1
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b20:	4659      	mov	r1, fp
 8006b22:	00cb      	lsls	r3, r1, #3
 8006b24:	4651      	mov	r1, sl
 8006b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b2a:	4651      	mov	r1, sl
 8006b2c:	00ca      	lsls	r2, r1, #3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4619      	mov	r1, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	4642      	mov	r2, r8
 8006b36:	189b      	adds	r3, r3, r2
 8006b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	eb42 0303 	adc.w	r3, r2, r3
 8006b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	008b      	lsls	r3, r1, #2
 8006b60:	4641      	mov	r1, r8
 8006b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b66:	4641      	mov	r1, r8
 8006b68:	008a      	lsls	r2, r1, #2
 8006b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b6e:	f7f9 fb2f 	bl	80001d0 <__aeabi_uldivmod>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4b0d      	ldr	r3, [pc, #52]	@ (8006bac <UART_SetConfig+0x4e4>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	@ 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	3332      	adds	r3, #50	@ 0x32
 8006b8a:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <UART_SetConfig+0x4e4>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 020f 	and.w	r2, r3, #15
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4422      	add	r2, r4
 8006b9e:	609a      	str	r2, [r3, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bac:	51eb851f 	.word	0x51eb851f

08006bb0 <__NVIC_SetPriority>:
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	db0a      	blt.n	8006bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	490c      	ldr	r1, [pc, #48]	@ (8006bfc <__NVIC_SetPriority+0x4c>)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	0112      	lsls	r2, r2, #4
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006bd8:	e00a      	b.n	8006bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4908      	ldr	r1, [pc, #32]	@ (8006c00 <__NVIC_SetPriority+0x50>)
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	3b04      	subs	r3, #4
 8006be8:	0112      	lsls	r2, r2, #4
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	440b      	add	r3, r1
 8006bee:	761a      	strb	r2, [r3, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	e000e100 	.word	0xe000e100
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c08:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <SysTick_Handler+0x1c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c0c:	f002 f878 	bl	8008d00 <xTaskGetSchedulerState>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c16:	f002 ff2f 	bl	8009a78 <xPortSysTickHandler>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	e000e010 	.word	0xe000e010

08006c24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f06f 0004 	mvn.w	r0, #4
 8006c2e:	f7ff ffbf 	bl	8006bb0 <__NVIC_SetPriority>
#endif
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	603b      	str	r3, [r7, #0]
  return(result);
 8006c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c4a:	f06f 0305 	mvn.w	r3, #5
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	e00c      	b.n	8006c6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c52:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <osKernelInitialize+0x44>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c5a:	4b08      	ldr	r3, [pc, #32]	@ (8006c7c <osKernelInitialize+0x44>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e002      	b.n	8006c6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20001004 	.word	0x20001004

08006c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c86:	f3ef 8305 	mrs	r3, IPSR
 8006c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c92:	f06f 0305 	mvn.w	r3, #5
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	e010      	b.n	8006cbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc8 <osKernelStart+0x48>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d109      	bne.n	8006cb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ca2:	f7ff ffbf 	bl	8006c24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ca6:	4b08      	ldr	r3, [pc, #32]	@ (8006cc8 <osKernelStart+0x48>)
 8006ca8:	2202      	movs	r2, #2
 8006caa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006cac:	f001 fbd0 	bl	8008450 <vTaskStartScheduler>
      stat = osOK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	607b      	str	r3, [r7, #4]
 8006cb4:	e002      	b.n	8006cbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cbc:	687b      	ldr	r3, [r7, #4]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20001004 	.word	0x20001004

08006ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08e      	sub	sp, #56	@ 0x38
 8006cd0:	af04      	add	r7, sp, #16
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cdc:	f3ef 8305 	mrs	r3, IPSR
 8006ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d17e      	bne.n	8006de6 <osThreadNew+0x11a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d07b      	beq.n	8006de6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006cee:	2380      	movs	r3, #128	@ 0x80
 8006cf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006cf2:	2318      	movs	r3, #24
 8006cf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d045      	beq.n	8006d92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <osThreadNew+0x48>
        name = attr->name;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <osThreadNew+0x6e>
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b38      	cmp	r3, #56	@ 0x38
 8006d2c:	d805      	bhi.n	8006d3a <osThreadNew+0x6e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <osThreadNew+0x72>
        return (NULL);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e054      	b.n	8006de8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	089b      	lsrs	r3, r3, #2
 8006d4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <osThreadNew+0xa8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8006d5c:	d90a      	bls.n	8006d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <osThreadNew+0xa8>
        mem = 1;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e010      	b.n	8006d96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <osThreadNew+0xca>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d108      	bne.n	8006d96 <osThreadNew+0xca>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <osThreadNew+0xca>
          mem = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	e001      	b.n	8006d96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d110      	bne.n	8006dbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006da4:	9202      	str	r2, [sp, #8]
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f001 f970 	bl	8008098 <xTaskCreateStatic>
 8006db8:	4603      	mov	r3, r0
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	e013      	b.n	8006de6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d110      	bne.n	8006de6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f001 f9be 	bl	8008158 <xTaskCreate>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <osThreadNew+0x11a>
            hTask = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006de6:	693b      	ldr	r3, [r7, #16]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3728      	adds	r7, #40	@ 0x28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df8:	f3ef 8305 	mrs	r3, IPSR
 8006dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <osDelay+0x1c>
    stat = osErrorISR;
 8006e04:	f06f 0305 	mvn.w	r3, #5
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e007      	b.n	8006e1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fae4 	bl	80083e4 <vTaskDelay>
    }
  }

  return (stat);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f002 fc40 	bl	80096b4 <pvTimerGetTimerID>
 8006e34:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	6852      	ldr	r2, [r2, #4]
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08c      	sub	sp, #48	@ 0x30
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	607a      	str	r2, [r7, #4]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e64:	f3ef 8305 	mrs	r3, IPSR
 8006e68:	613b      	str	r3, [r7, #16]
  return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d163      	bne.n	8006f38 <osTimerNew+0xe8>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d060      	beq.n	8006f38 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006e76:	2008      	movs	r0, #8
 8006e78:	f002 fe90 	bl	8009b9c <pvPortMalloc>
 8006e7c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d059      	beq.n	8006f38 <osTimerNew+0xe8>
      callb->func = func;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	e001      	b.n	8006ea0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01c      	beq.n	8006eea <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <osTimerNew+0x6e>
          name = attr->name;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <osTimerNew+0x84>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ecc:	d902      	bls.n	8006ed4 <osTimerNew+0x84>
          mem = 1;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e00c      	b.n	8006eee <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <osTimerNew+0x9e>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <osTimerNew+0x9e>
            mem = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e001      	b.n	8006eee <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10c      	bne.n	8006f0e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <osTimerNew+0xf4>)
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	2101      	movs	r1, #1
 8006f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f06:	f002 f848 	bl	8008f9a <xTimerCreateStatic>
 8006f0a:	6238      	str	r0, [r7, #32]
 8006f0c:	e00b      	b.n	8006f26 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d108      	bne.n	8006f26 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <osTimerNew+0xf4>)
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f20:	f002 f81a 	bl	8008f58 <xTimerCreate>
 8006f24:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <osTimerNew+0xe8>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <osTimerNew+0xe8>
        vPortFree (callb);
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f002 ff00 	bl	8009d38 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006f38:	6a3b      	ldr	r3, [r7, #32]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	@ 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	08006e27 	.word	0x08006e27

08006f48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f54:	f3ef 8305 	mrs	r3, IPSR
 8006f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d174      	bne.n	800704a <osMutexNew+0x102>
    if (attr != NULL) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <osMutexNew+0x26>
      type = attr->attr_bits;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e001      	b.n	8006f72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <osMutexNew+0x3a>
      rmtx = 1U;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e001      	b.n	8006f86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d15c      	bne.n	800704a <osMutexNew+0x102>
      mem = -1;
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d015      	beq.n	8006fc8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <osMutexNew+0x6a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b4f      	cmp	r3, #79	@ 0x4f
 8006faa:	d902      	bls.n	8006fb2 <osMutexNew+0x6a>
          mem = 1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	e00c      	b.n	8006fcc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d108      	bne.n	8006fcc <osMutexNew+0x84>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <osMutexNew+0x84>
            mem = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	e001      	b.n	8006fcc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d112      	bne.n	8006ff8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	2004      	movs	r0, #4
 8006fe0:	f000 fb93 	bl	800770a <xQueueCreateMutexStatic>
 8006fe4:	61f8      	str	r0, [r7, #28]
 8006fe6:	e016      	b.n	8007016 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4619      	mov	r1, r3
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f000 fb8b 	bl	800770a <xQueueCreateMutexStatic>
 8006ff4:	61f8      	str	r0, [r7, #28]
 8006ff6:	e00e      	b.n	8007016 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007004:	2004      	movs	r0, #4
 8007006:	f000 fb68 	bl	80076da <xQueueCreateMutex>
 800700a:	61f8      	str	r0, [r7, #28]
 800700c:	e003      	b.n	8007016 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800700e:	2001      	movs	r0, #1
 8007010:	f000 fb63 	bl	80076da <xQueueCreateMutex>
 8007014:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <osMutexNew+0xee>
        if (attr != NULL) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <osMutexNew+0xe2>
          name = attr->name;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e001      	b.n	800702e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	69f8      	ldr	r0, [r7, #28]
 8007032:	f000 ffa9 	bl	8007f88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <osMutexNew+0x102>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800704a:	69fb      	ldr	r3, [r7, #28]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	@ 0x28
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007064:	f3ef 8305 	mrs	r3, IPSR
 8007068:	613b      	str	r3, [r7, #16]
  return(result);
 800706a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800706c:	2b00      	cmp	r3, #0
 800706e:	d175      	bne.n	800715c <osSemaphoreNew+0x108>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d072      	beq.n	800715c <osSemaphoreNew+0x108>
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d86e      	bhi.n	800715c <osSemaphoreNew+0x108>
    mem = -1;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d015      	beq.n	80070b6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d006      	beq.n	80070a0 <osSemaphoreNew+0x4c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b4f      	cmp	r3, #79	@ 0x4f
 8007098:	d902      	bls.n	80070a0 <osSemaphoreNew+0x4c>
        mem = 1;
 800709a:	2301      	movs	r3, #1
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e00c      	b.n	80070ba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <osSemaphoreNew+0x66>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <osSemaphoreNew+0x66>
          mem = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e001      	b.n	80070ba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d04c      	beq.n	800715c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d128      	bne.n	800711a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10a      	bne.n	80070e4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2203      	movs	r2, #3
 80070d4:	9200      	str	r2, [sp, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2100      	movs	r1, #0
 80070da:	2001      	movs	r0, #1
 80070dc:	f000 fa08 	bl	80074f0 <xQueueGenericCreateStatic>
 80070e0:	61f8      	str	r0, [r7, #28]
 80070e2:	e005      	b.n	80070f0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80070e4:	2203      	movs	r2, #3
 80070e6:	2100      	movs	r1, #0
 80070e8:	2001      	movs	r0, #1
 80070ea:	f000 fa7e 	bl	80075ea <xQueueGenericCreate>
 80070ee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d022      	beq.n	800713c <osSemaphoreNew+0xe8>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01f      	beq.n	800713c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	69f8      	ldr	r0, [r7, #28]
 8007104:	f000 fb8a 	bl	800781c <xQueueGenericSend>
 8007108:	4603      	mov	r3, r0
 800710a:	2b01      	cmp	r3, #1
 800710c:	d016      	beq.n	800713c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800710e:	69f8      	ldr	r0, [r7, #28]
 8007110:	f000 fe06 	bl	8007d20 <vQueueDelete>
            hSemaphore = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	e010      	b.n	800713c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d108      	bne.n	8007132 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	461a      	mov	r2, r3
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fb09 	bl	8007740 <xQueueCreateCountingSemaphoreStatic>
 800712e:	61f8      	str	r0, [r7, #28]
 8007130:	e004      	b.n	800713c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fb3c 	bl	80077b2 <xQueueCreateCountingSemaphore>
 800713a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e001      	b.n	8007154 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007154:	6979      	ldr	r1, [r7, #20]
 8007156:	69f8      	ldr	r0, [r7, #28]
 8007158:	f000 ff16 	bl	8007f88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007166:	b580      	push	{r7, lr}
 8007168:	b08a      	sub	sp, #40	@ 0x28
 800716a:	af02      	add	r7, sp, #8
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007176:	f3ef 8305 	mrs	r3, IPSR
 800717a:	613b      	str	r3, [r7, #16]
  return(result);
 800717c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800717e:	2b00      	cmp	r3, #0
 8007180:	d15f      	bne.n	8007242 <osMessageQueueNew+0xdc>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d05c      	beq.n	8007242 <osMessageQueueNew+0xdc>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d059      	beq.n	8007242 <osMessageQueueNew+0xdc>
    mem = -1;
 800718e:	f04f 33ff 	mov.w	r3, #4294967295
 8007192:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d029      	beq.n	80071ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <osMessageQueueNew+0x62>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80071a8:	d90e      	bls.n	80071c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	429a      	cmp	r2, r3
 80071c0:	d302      	bcc.n	80071c8 <osMessageQueueNew+0x62>
        mem = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e014      	b.n	80071f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <osMessageQueueNew+0x8c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10c      	bne.n	80071f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d108      	bne.n	80071f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e001      	b.n	80071f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d10b      	bne.n	8007210 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2100      	movs	r1, #0
 8007202:	9100      	str	r1, [sp, #0]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f972 	bl	80074f0 <xQueueGenericCreateStatic>
 800720c:	61f8      	str	r0, [r7, #28]
 800720e:	e008      	b.n	8007222 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d105      	bne.n	8007222 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007216:	2200      	movs	r2, #0
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f9e5 	bl	80075ea <xQueueGenericCreate>
 8007220:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00c      	beq.n	8007242 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <osMessageQueueNew+0xd0>
        name = attr->name;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e001      	b.n	800723a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	69f8      	ldr	r0, [r7, #28]
 800723e:	f000 fea3 	bl	8007f88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007242:	69fb      	ldr	r3, [r7, #28]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a07      	ldr	r2, [pc, #28]	@ (8007278 <vApplicationGetIdleTaskMemory+0x2c>)
 800725c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4a06      	ldr	r2, [pc, #24]	@ (800727c <vApplicationGetIdleTaskMemory+0x30>)
 8007262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2280      	movs	r2, #128	@ 0x80
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20001008 	.word	0x20001008
 800727c:	20001064 	.word	0x20001064

08007280 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a07      	ldr	r2, [pc, #28]	@ (80072ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007290:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4a06      	ldr	r2, [pc, #24]	@ (80072b0 <vApplicationGetTimerTaskMemory+0x30>)
 8007296:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800729e:	601a      	str	r2, [r3, #0]
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20001264 	.word	0x20001264
 80072b0:	200012c0 	.word	0x200012c0

080072b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f103 0208 	add.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295
 80072cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 0208 	add.w	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f103 0208 	add.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d103      	bne.n	8007376 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e00c      	b.n	8007390 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3308      	adds	r3, #8
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e002      	b.n	8007384 <vListInsert+0x2e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d2f6      	bcs.n	800737e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6892      	ldr	r2, [r2, #8]
 80073de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6852      	ldr	r2, [r2, #4]
 80073e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d103      	bne.n	80073fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007448:	f002 fa86 	bl	8009958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	441a      	add	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	3b01      	subs	r3, #1
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22ff      	movs	r2, #255	@ 0xff
 800748c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	22ff      	movs	r2, #255	@ 0xff
 8007494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d114      	bne.n	80074c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01a      	beq.n	80074dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3310      	adds	r3, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fa66 	bl	800897c <xTaskRemoveFromEventList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d012      	beq.n	80074dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <xQueueGenericReset+0xd0>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	e009      	b.n	80074dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3310      	adds	r3, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fef1 	bl	80072b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3324      	adds	r3, #36	@ 0x24
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff feec 	bl	80072b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074dc:	f002 fa6e 	bl	80099bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074e0:	2301      	movs	r3, #1
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	e000ed04 	.word	0xe000ed04

080074f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	@ 0x38
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <xQueueGenericCreateStatic+0x56>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <xQueueGenericCreateStatic+0x5a>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericCreateStatic+0x5c>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <xQueueGenericCreateStatic+0x84>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <xQueueGenericCreateStatic+0x88>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <xQueueGenericCreateStatic+0x8a>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61fb      	str	r3, [r7, #28]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007596:	2350      	movs	r3, #80	@ 0x50
 8007598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b50      	cmp	r3, #80	@ 0x50
 800759e:	d00b      	beq.n	80075b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	61bb      	str	r3, [r7, #24]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f840 	bl	8007660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	@ 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b08a      	sub	sp, #40	@ 0x28
 80075ee:	af02      	add	r7, sp, #8
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	4613      	mov	r3, r2
 80075f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <xQueueGenericCreate+0x2c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	613b      	str	r3, [r7, #16]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	fb02 f303 	mul.w	r3, r2, r3
 800761e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3350      	adds	r3, #80	@ 0x50
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fab9 	bl	8009b9c <pvPortMalloc>
 800762a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d011      	beq.n	8007656 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	3350      	adds	r3, #80	@ 0x50
 800763a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007644:	79fa      	ldrb	r2, [r7, #7]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f805 	bl	8007660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007656:	69bb      	ldr	r3, [r7, #24]
	}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e002      	b.n	8007682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800768e:	2101      	movs	r1, #1
 8007690:	69b8      	ldr	r0, [r7, #24]
 8007692:	f7ff fec3 	bl	800741c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	2100      	movs	r1, #0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f8a5 	bl	800781c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	4603      	mov	r3, r0
 80076e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6939      	ldr	r1, [r7, #16]
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f7ff ff79 	bl	80075ea <xQueueGenericCreate>
 80076f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff ffd3 	bl	80076a6 <prvInitialiseMutex>

		return xNewQueue;
 8007700:	68fb      	ldr	r3, [r7, #12]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800770a:	b580      	push	{r7, lr}
 800770c:	b088      	sub	sp, #32
 800770e:	af02      	add	r7, sp, #8
 8007710:	4603      	mov	r3, r0
 8007712:	6039      	str	r1, [r7, #0]
 8007714:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2200      	movs	r2, #0
 8007726:	6939      	ldr	r1, [r7, #16]
 8007728:	6978      	ldr	r0, [r7, #20]
 800772a:	f7ff fee1 	bl	80074f0 <xQueueGenericCreateStatic>
 800772e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff ffb8 	bl	80076a6 <prvInitialiseMutex>

		return xNewQueue;
 8007736:	68fb      	ldr	r3, [r7, #12]
	}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	@ 0x28
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61bb      	str	r3, [r7, #24]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	429a      	cmp	r2, r3
 8007770:	d90b      	bls.n	800778a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	617b      	str	r3, [r7, #20]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800778a:	2302      	movs	r3, #2
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	2100      	movs	r1, #0
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff feab 	bl	80074f0 <xQueueGenericCreateStatic>
 800779a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077a8:	69fb      	ldr	r3, [r7, #28]
	}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	613b      	str	r3, [r7, #16]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d90b      	bls.n	80077fa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	60fb      	str	r3, [r7, #12]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077fa:	2202      	movs	r2, #2
 80077fc:	2100      	movs	r1, #0
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fef3 	bl	80075ea <xQueueGenericCreate>
 8007804:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007812:	697b      	ldr	r3, [r7, #20]
	}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	@ 0x38
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <xQueueGenericSend+0x34>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <xQueueGenericSend+0x42>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <xQueueGenericSend+0x46>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueGenericSend+0x48>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10b      	bne.n	8007880 <xQueueGenericSend+0x64>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	e7fd      	b.n	800787c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d103      	bne.n	800788e <xQueueGenericSend+0x72>
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <xQueueGenericSend+0x76>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueGenericSend+0x78>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10b      	bne.n	80078b0 <xQueueGenericSend+0x94>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	623b      	str	r3, [r7, #32]
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b0:	f001 fa26 	bl	8008d00 <xTaskGetSchedulerState>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xQueueGenericSend+0xa4>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <xQueueGenericSend+0xa8>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <xQueueGenericSend+0xaa>
 80078c4:	2300      	movs	r3, #0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61fb      	str	r3, [r7, #28]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f002 f839 	bl	8009958 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <xQueueGenericSend+0xdc>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d129      	bne.n	800794c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fe:	f000 fa33 	bl	8007d68 <prvCopyDataToQueue>
 8007902:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d010      	beq.n	800792e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	3324      	adds	r3, #36	@ 0x24
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f833 	bl	800897c <xTaskRemoveFromEventList>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d013      	beq.n	8007944 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800791c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a1c <xQueueGenericSend+0x200>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	e00a      	b.n	8007944 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800792e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007934:	4b39      	ldr	r3, [pc, #228]	@ (8007a1c <xQueueGenericSend+0x200>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007944:	f002 f83a 	bl	80099bc <vPortExitCritical>
				return pdPASS;
 8007948:	2301      	movs	r3, #1
 800794a:	e063      	b.n	8007a14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007952:	f002 f833 	bl	80099bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007956:	2300      	movs	r3, #0
 8007958:	e05c      	b.n	8007a14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007960:	f107 0314 	add.w	r3, r7, #20
 8007964:	4618      	mov	r0, r3
 8007966:	f001 f86d 	bl	8008a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800796e:	f002 f825 	bl	80099bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007972:	f000 fdd5 	bl	8008520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007976:	f001 ffef 	bl	8009958 <vPortEnterCritical>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007980:	b25b      	sxtb	r3, r3
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d103      	bne.n	8007990 <xQueueGenericSend+0x174>
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007996:	b25b      	sxtb	r3, r3
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d103      	bne.n	80079a6 <xQueueGenericSend+0x18a>
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079a6:	f002 f809 	bl	80099bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079aa:	1d3a      	adds	r2, r7, #4
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 f85c 	bl	8008a70 <xTaskCheckForTimeOut>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d124      	bne.n	8007a08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079c0:	f000 faca 	bl	8007f58 <prvIsQueueFull>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d018      	beq.n	80079fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079cc:	3310      	adds	r3, #16
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 ff80 	bl	80088d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079da:	f000 fa55 	bl	8007e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079de:	f000 fdad 	bl	800853c <xTaskResumeAll>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f47f af7c 	bne.w	80078e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079ea:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <xQueueGenericSend+0x200>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	e772      	b.n	80078e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079fe:	f000 fa43 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a02:	f000 fd9b 	bl	800853c <xTaskResumeAll>
 8007a06:	e76c      	b.n	80078e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a0a:	f000 fa3d 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a0e:	f000 fd95 	bl	800853c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3738      	adds	r7, #56	@ 0x38
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b090      	sub	sp, #64	@ 0x40
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <xQueueGenericSendFromISR+0x3e>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <xQueueGenericSendFromISR+0x42>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <xQueueGenericSendFromISR+0x44>
 8007a62:	2300      	movs	r3, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10b      	bne.n	8007a80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d103      	bne.n	8007a8e <xQueueGenericSendFromISR+0x6e>
 8007a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <xQueueGenericSendFromISR+0x72>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <xQueueGenericSendFromISR+0x74>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	623b      	str	r3, [r7, #32]
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	e7fd      	b.n	8007aac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab0:	f002 f832 	bl	8009b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ab4:	f3ef 8211 	mrs	r2, BASEPRI
 8007ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	61fa      	str	r2, [r7, #28]
 8007aca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007acc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <xQueueGenericSendFromISR+0xc2>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d12f      	bne.n	8007b42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ae8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007af8:	f000 f936 	bl	8007d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007afc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d112      	bne.n	8007b2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d016      	beq.n	8007b3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	3324      	adds	r3, #36	@ 0x24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 ff32 	bl	800897c <xTaskRemoveFromEventList>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00e      	beq.n	8007b3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e007      	b.n	8007b3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b30:	3301      	adds	r3, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	b25a      	sxtb	r2, r3
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b40:	e001      	b.n	8007b46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3740      	adds	r7, #64	@ 0x40
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	@ 0x30
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <xQueueReceive+0x32>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	623b      	str	r3, [r7, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <xQueueReceive+0x40>
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <xQueueReceive+0x44>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <xQueueReceive+0x46>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <xQueueReceive+0x62>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61fb      	str	r3, [r7, #28]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bbe:	f001 f89f 	bl	8008d00 <xTaskGetSchedulerState>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <xQueueReceive+0x72>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <xQueueReceive+0x76>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <xQueueReceive+0x78>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <xQueueReceive+0x94>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61bb      	str	r3, [r7, #24]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bf0:	f001 feb2 	bl	8009958 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01f      	beq.n	8007c40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c04:	f000 f91a 	bl	8007e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	1e5a      	subs	r2, r3, #1
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00f      	beq.n	8007c38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	3310      	adds	r3, #16
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fead 	bl	800897c <xTaskRemoveFromEventList>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c28:	4b3c      	ldr	r3, [pc, #240]	@ (8007d1c <xQueueReceive+0x1c0>)
 8007c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c38:	f001 fec0 	bl	80099bc <vPortExitCritical>
				return pdPASS;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e069      	b.n	8007d14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c46:	f001 feb9 	bl	80099bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e062      	b.n	8007d14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c54:	f107 0310 	add.w	r3, r7, #16
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fef3 	bl	8008a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c62:	f001 feab 	bl	80099bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c66:	f000 fc5b 	bl	8008520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c6a:	f001 fe75 	bl	8009958 <vPortEnterCritical>
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d103      	bne.n	8007c84 <xQueueReceive+0x128>
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c8a:	b25b      	sxtb	r3, r3
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d103      	bne.n	8007c9a <xQueueReceive+0x13e>
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c9a:	f001 fe8f 	bl	80099bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c9e:	1d3a      	adds	r2, r7, #4
 8007ca0:	f107 0310 	add.w	r3, r7, #16
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fee2 	bl	8008a70 <xTaskCheckForTimeOut>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d123      	bne.n	8007cfa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb4:	f000 f93a 	bl	8007f2c <prvIsQueueEmpty>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d017      	beq.n	8007cee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	3324      	adds	r3, #36	@ 0x24
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fe06 	bl	80088d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cce:	f000 f8db 	bl	8007e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cd2:	f000 fc33 	bl	800853c <xTaskResumeAll>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d189      	bne.n	8007bf0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <xQueueReceive+0x1c0>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	e780      	b.n	8007bf0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf0:	f000 f8ca 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cf4:	f000 fc22 	bl	800853c <xTaskResumeAll>
 8007cf8:	e77a      	b.n	8007bf0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfc:	f000 f8c4 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d00:	f000 fc1c 	bl	800853c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d06:	f000 f911 	bl	8007f2c <prvIsQueueEmpty>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f43f af6f 	beq.w	8007bf0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3730      	adds	r7, #48	@ 0x30
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <vQueueDelete+0x2a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60bb      	str	r3, [r7, #8]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f946 	bl	8007fdc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d102      	bne.n	8007d60 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 ffec 	bl	8009d38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d14d      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 ffd2 	bl	8008d3c <xTaskPriorityDisinherit>
 8007d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	e043      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d119      	bne.n	8007ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6858      	ldr	r0, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f002 f90c 	bl	8009fd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d32b      	bcc.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	e026      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68d8      	ldr	r0, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	461a      	mov	r2, r3
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	f002 f8f2 	bl	8009fd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df4:	425b      	negs	r3, r3
 8007df6:	441a      	add	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d207      	bcs.n	8007e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e10:	425b      	negs	r3, r3
 8007e12:	441a      	add	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d105      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e32:	697b      	ldr	r3, [r7, #20]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d018      	beq.n	8007e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d303      	bcc.n	8007e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68d9      	ldr	r1, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6838      	ldr	r0, [r7, #0]
 8007e7c:	f002 f8a8 	bl	8009fd0 <memcpy>
	}
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e90:	f001 fd62 	bl	8009958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e9c:	e011      	b.n	8007ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d012      	beq.n	8007ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fd66 	bl	800897c <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007eb6:	f000 fe3f 	bl	8008b38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dce9      	bgt.n	8007e9e <prvUnlockQueue+0x16>
 8007eca:	e000      	b.n	8007ece <prvUnlockQueue+0x46>
					break;
 8007ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	22ff      	movs	r2, #255	@ 0xff
 8007ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ed6:	f001 fd71 	bl	80099bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eda:	f001 fd3d 	bl	8009958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ee6:	e011      	b.n	8007f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3310      	adds	r3, #16
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fd41 	bl	800897c <xTaskRemoveFromEventList>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f00:	f000 fe1a 	bl	8008b38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dce9      	bgt.n	8007ee8 <prvUnlockQueue+0x60>
 8007f14:	e000      	b.n	8007f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	22ff      	movs	r2, #255	@ 0xff
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f20:	f001 fd4c 	bl	80099bc <vPortExitCritical>
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f34:	f001 fd10 	bl	8009958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e001      	b.n	8007f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 fd37 	bl	80099bc <vPortExitCritical>

	return xReturn;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f60:	f001 fcfa 	bl	8009958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d102      	bne.n	8007f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e001      	b.n	8007f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f7a:	f001 fd1f 	bl	80099bc <vPortExitCritical>

	return xReturn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e014      	b.n	8007fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f98:	4a0f      	ldr	r2, [pc, #60]	@ (8007fd8 <vQueueAddToRegistry+0x50>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fa4:	490c      	ldr	r1, [pc, #48]	@ (8007fd8 <vQueueAddToRegistry+0x50>)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fae:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd8 <vQueueAddToRegistry+0x50>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fba:	e006      	b.n	8007fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b07      	cmp	r3, #7
 8007fc6:	d9e7      	bls.n	8007f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	200072c0 	.word	0x200072c0

08007fdc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e016      	b.n	8008018 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007fea:	4a10      	ldr	r2, [pc, #64]	@ (800802c <vQueueUnregisterQueue+0x50>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d10b      	bne.n	8008012 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800802c <vQueueUnregisterQueue+0x50>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2100      	movs	r1, #0
 8008000:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008004:	4a09      	ldr	r2, [pc, #36]	@ (800802c <vQueueUnregisterQueue+0x50>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	2200      	movs	r2, #0
 800800e:	605a      	str	r2, [r3, #4]
				break;
 8008010:	e006      	b.n	8008020 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b07      	cmp	r3, #7
 800801c:	d9e5      	bls.n	8007fea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200072c0 	.word	0x200072c0

08008030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008040:	f001 fc8a 	bl	8009958 <vPortEnterCritical>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <vQueueWaitForMessageRestricted+0x2a>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008060:	b25b      	sxtb	r3, r3
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d103      	bne.n	8008070 <vQueueWaitForMessageRestricted+0x40>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008070:	f001 fca4 	bl	80099bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3324      	adds	r3, #36	@ 0x24
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fc4d 	bl	8008924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800808a:	6978      	ldr	r0, [r7, #20]
 800808c:	f7ff fefc 	bl	8007e88 <prvUnlockQueue>
	}
 8008090:	bf00      	nop
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	@ 0x38
 800809c:	af04      	add	r7, sp, #16
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	623b      	str	r3, [r7, #32]
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	61fb      	str	r3, [r7, #28]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080e2:	235c      	movs	r3, #92	@ 0x5c
 80080e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80080ea:	d00b      	beq.n	8008104 <xTaskCreateStatic+0x6c>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61bb      	str	r3, [r7, #24]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008104:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01e      	beq.n	800814a <xTaskCreateStatic+0xb2>
 800810c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01b      	beq.n	800814a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	2202      	movs	r2, #2
 8008120:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008124:	2300      	movs	r3, #0
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f850 	bl	80081e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008144:	f000 f8de 	bl	8008304 <prvAddNewTaskToReadyList>
 8008148:	e001      	b.n	800814e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800814e:	697b      	ldr	r3, [r7, #20]
	}
 8008150:	4618      	mov	r0, r3
 8008152:	3728      	adds	r7, #40	@ 0x28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	@ 0x30
 800815c:	af04      	add	r7, sp, #16
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fd15 	bl	8009b9c <pvPortMalloc>
 8008172:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800817a:	205c      	movs	r0, #92	@ 0x5c
 800817c:	f001 fd0e 	bl	8009b9c <pvPortMalloc>
 8008180:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	631a      	str	r2, [r3, #48]	@ 0x30
 800818e:	e005      	b.n	800819c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008190:	6978      	ldr	r0, [r7, #20]
 8008192:	f001 fdd1 	bl	8009d38 <vPortFree>
 8008196:	e001      	b.n	800819c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d017      	beq.n	80081d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081aa:	88fa      	ldrh	r2, [r7, #6]
 80081ac:	2300      	movs	r3, #0
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f80e 	bl	80081e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081c6:	69f8      	ldr	r0, [r7, #28]
 80081c8:	f000 f89c 	bl	8008304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081cc:	2301      	movs	r3, #1
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	e002      	b.n	80081d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081d2:	f04f 33ff 	mov.w	r3, #4294967295
 80081d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081d8:	69bb      	ldr	r3, [r7, #24]
	}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b088      	sub	sp, #32
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	461a      	mov	r2, r3
 80081fa:	21a5      	movs	r1, #165	@ 0xa5
 80081fc:	f001 febc 	bl	8009f78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800820a:	3b01      	subs	r3, #1
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f023 0307 	bic.w	r3, r3, #7
 8008218:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	617b      	str	r3, [r7, #20]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01f      	beq.n	8008282 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008242:	2300      	movs	r3, #0
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	e012      	b.n	800826e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	7819      	ldrb	r1, [r3, #0]
 8008250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	3334      	adds	r3, #52	@ 0x34
 8008258:	460a      	mov	r2, r1
 800825a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	4413      	add	r3, r2
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	2b0f      	cmp	r3, #15
 8008272:	d9e9      	bls.n	8008248 <prvInitialiseNewTask+0x66>
 8008274:	e000      	b.n	8008278 <prvInitialiseNewTask+0x96>
			{
				break;
 8008276:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008280:	e003      	b.n	800828a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	2b37      	cmp	r3, #55	@ 0x37
 800828e:	d901      	bls.n	8008294 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008290:	2337      	movs	r3, #55	@ 0x37
 8008292:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008298:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800829e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	2200      	movs	r2, #0
 80082a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff f822 	bl	80072f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	3318      	adds	r3, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff f81d 	bl	80072f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	2200      	movs	r2, #0
 80082d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	68f9      	ldr	r1, [r7, #12]
 80082e2:	69b8      	ldr	r0, [r7, #24]
 80082e4:	f001 fa08 	bl	80096f8 <pxPortInitialiseStack>
 80082e8:	4602      	mov	r2, r0
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082fa:	bf00      	nop
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800830c:	f001 fb24 	bl	8009958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008310:	4b2d      	ldr	r3, [pc, #180]	@ (80083c8 <prvAddNewTaskToReadyList+0xc4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	4a2c      	ldr	r2, [pc, #176]	@ (80083c8 <prvAddNewTaskToReadyList+0xc4>)
 8008318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800831a:	4b2c      	ldr	r3, [pc, #176]	@ (80083cc <prvAddNewTaskToReadyList+0xc8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008322:	4a2a      	ldr	r2, [pc, #168]	@ (80083cc <prvAddNewTaskToReadyList+0xc8>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008328:	4b27      	ldr	r3, [pc, #156]	@ (80083c8 <prvAddNewTaskToReadyList+0xc4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d110      	bne.n	8008352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008330:	f000 fc28 	bl	8008b84 <prvInitialiseTaskLists>
 8008334:	e00d      	b.n	8008352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008336:	4b26      	ldr	r3, [pc, #152]	@ (80083d0 <prvAddNewTaskToReadyList+0xcc>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800833e:	4b23      	ldr	r3, [pc, #140]	@ (80083cc <prvAddNewTaskToReadyList+0xc8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	429a      	cmp	r2, r3
 800834a:	d802      	bhi.n	8008352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800834c:	4a1f      	ldr	r2, [pc, #124]	@ (80083cc <prvAddNewTaskToReadyList+0xc8>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008352:	4b20      	ldr	r3, [pc, #128]	@ (80083d4 <prvAddNewTaskToReadyList+0xd0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3301      	adds	r3, #1
 8008358:	4a1e      	ldr	r2, [pc, #120]	@ (80083d4 <prvAddNewTaskToReadyList+0xd0>)
 800835a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800835c:	4b1d      	ldr	r3, [pc, #116]	@ (80083d4 <prvAddNewTaskToReadyList+0xd0>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008368:	4b1b      	ldr	r3, [pc, #108]	@ (80083d8 <prvAddNewTaskToReadyList+0xd4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d903      	bls.n	8008378 <prvAddNewTaskToReadyList+0x74>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <prvAddNewTaskToReadyList+0xd4>)
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4a15      	ldr	r2, [pc, #84]	@ (80083dc <prvAddNewTaskToReadyList+0xd8>)
 8008386:	441a      	add	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7fe ffbd 	bl	800730e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008394:	f001 fb12 	bl	80099bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008398:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <prvAddNewTaskToReadyList+0xcc>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083a0:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <prvAddNewTaskToReadyList+0xc8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d207      	bcs.n	80083be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <prvAddNewTaskToReadyList+0xdc>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200077d4 	.word	0x200077d4
 80083cc:	20007300 	.word	0x20007300
 80083d0:	200077e0 	.word	0x200077e0
 80083d4:	200077f0 	.word	0x200077f0
 80083d8:	200077dc 	.word	0x200077dc
 80083dc:	20007304 	.word	0x20007304
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d018      	beq.n	8008428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083f6:	4b14      	ldr	r3, [pc, #80]	@ (8008448 <vTaskDelay+0x64>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <vTaskDelay+0x32>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60bb      	str	r3, [r7, #8]
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	e7fd      	b.n	8008412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008416:	f000 f883 	bl	8008520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800841a:	2100      	movs	r1, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fcfd 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008422:	f000 f88b 	bl	800853c <xTaskResumeAll>
 8008426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800842e:	4b07      	ldr	r3, [pc, #28]	@ (800844c <vTaskDelay+0x68>)
 8008430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200077fc 	.word	0x200077fc
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	@ 0x28
 8008454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800845e:	463a      	mov	r2, r7
 8008460:	1d39      	adds	r1, r7, #4
 8008462:	f107 0308 	add.w	r3, r7, #8
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fef0 	bl	800724c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	9202      	str	r2, [sp, #8]
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	2300      	movs	r3, #0
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	2300      	movs	r3, #0
 800847c:	460a      	mov	r2, r1
 800847e:	4922      	ldr	r1, [pc, #136]	@ (8008508 <vTaskStartScheduler+0xb8>)
 8008480:	4822      	ldr	r0, [pc, #136]	@ (800850c <vTaskStartScheduler+0xbc>)
 8008482:	f7ff fe09 	bl	8008098 <xTaskCreateStatic>
 8008486:	4603      	mov	r3, r0
 8008488:	4a21      	ldr	r2, [pc, #132]	@ (8008510 <vTaskStartScheduler+0xc0>)
 800848a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800848c:	4b20      	ldr	r3, [pc, #128]	@ (8008510 <vTaskStartScheduler+0xc0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008494:	2301      	movs	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e001      	b.n	800849e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d102      	bne.n	80084aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084a4:	f000 fd0e 	bl	8008ec4 <xTimerCreateTimerTask>
 80084a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d116      	bne.n	80084de <vTaskStartScheduler+0x8e>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	613b      	str	r3, [r7, #16]
}
 80084c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084c4:	4b13      	ldr	r3, [pc, #76]	@ (8008514 <vTaskStartScheduler+0xc4>)
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084cc:	4b12      	ldr	r3, [pc, #72]	@ (8008518 <vTaskStartScheduler+0xc8>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084d2:	4b12      	ldr	r3, [pc, #72]	@ (800851c <vTaskStartScheduler+0xcc>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084d8:	f001 f99a 	bl	8009810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084dc:	e00f      	b.n	80084fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d10b      	bne.n	80084fe <vTaskStartScheduler+0xae>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <vTaskStartScheduler+0xaa>
}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	0800a130 	.word	0x0800a130
 800850c:	08008b51 	.word	0x08008b51
 8008510:	200077f8 	.word	0x200077f8
 8008514:	200077f4 	.word	0x200077f4
 8008518:	200077e0 	.word	0x200077e0
 800851c:	200077d8 	.word	0x200077d8

08008520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008524:	4b04      	ldr	r3, [pc, #16]	@ (8008538 <vTaskSuspendAll+0x18>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	4a03      	ldr	r2, [pc, #12]	@ (8008538 <vTaskSuspendAll+0x18>)
 800852c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800852e:	bf00      	nop
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	200077fc 	.word	0x200077fc

0800853c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800854a:	4b42      	ldr	r3, [pc, #264]	@ (8008654 <xTaskResumeAll+0x118>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <xTaskResumeAll+0x2e>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	603b      	str	r3, [r7, #0]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800856a:	f001 f9f5 	bl	8009958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800856e:	4b39      	ldr	r3, [pc, #228]	@ (8008654 <xTaskResumeAll+0x118>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3b01      	subs	r3, #1
 8008574:	4a37      	ldr	r2, [pc, #220]	@ (8008654 <xTaskResumeAll+0x118>)
 8008576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008578:	4b36      	ldr	r3, [pc, #216]	@ (8008654 <xTaskResumeAll+0x118>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d162      	bne.n	8008646 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008580:	4b35      	ldr	r3, [pc, #212]	@ (8008658 <xTaskResumeAll+0x11c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d05e      	beq.n	8008646 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008588:	e02f      	b.n	80085ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800858a:	4b34      	ldr	r3, [pc, #208]	@ (800865c <xTaskResumeAll+0x120>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3318      	adds	r3, #24
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe ff16 	bl	80073c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3304      	adds	r3, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe ff11 	bl	80073c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008660 <xTaskResumeAll+0x124>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d903      	bls.n	80085ba <xTaskResumeAll+0x7e>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008660 <xTaskResumeAll+0x124>)
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4a27      	ldr	r2, [pc, #156]	@ (8008664 <xTaskResumeAll+0x128>)
 80085c8:	441a      	add	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe fe9c 	bl	800730e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085da:	4b23      	ldr	r3, [pc, #140]	@ (8008668 <xTaskResumeAll+0x12c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80085e4:	4b21      	ldr	r3, [pc, #132]	@ (800866c <xTaskResumeAll+0x130>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ea:	4b1c      	ldr	r3, [pc, #112]	@ (800865c <xTaskResumeAll+0x120>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1cb      	bne.n	800858a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085f8:	f000 fb62 	bl	8008cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008670 <xTaskResumeAll+0x134>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008608:	f000 f846 	bl	8008698 <xTaskIncrementTick>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008612:	4b16      	ldr	r3, [pc, #88]	@ (800866c <xTaskResumeAll+0x130>)
 8008614:	2201      	movs	r2, #1
 8008616:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3b01      	subs	r3, #1
 800861c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f1      	bne.n	8008608 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008624:	4b12      	ldr	r3, [pc, #72]	@ (8008670 <xTaskResumeAll+0x134>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800862a:	4b10      	ldr	r3, [pc, #64]	@ (800866c <xTaskResumeAll+0x130>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008636:	4b0f      	ldr	r3, [pc, #60]	@ (8008674 <xTaskResumeAll+0x138>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008646:	f001 f9b9 	bl	80099bc <vPortExitCritical>

	return xAlreadyYielded;
 800864a:	68bb      	ldr	r3, [r7, #8]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200077fc 	.word	0x200077fc
 8008658:	200077d4 	.word	0x200077d4
 800865c:	20007794 	.word	0x20007794
 8008660:	200077dc 	.word	0x200077dc
 8008664:	20007304 	.word	0x20007304
 8008668:	20007300 	.word	0x20007300
 800866c:	200077e8 	.word	0x200077e8
 8008670:	200077e4 	.word	0x200077e4
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800867e:	4b05      	ldr	r3, [pc, #20]	@ (8008694 <xTaskGetTickCount+0x1c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008684:	687b      	ldr	r3, [r7, #4]
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	200077d8 	.word	0x200077d8

08008698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a2:	4b53      	ldr	r3, [pc, #332]	@ (80087f0 <xTaskIncrementTick+0x158>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 8096 	bne.w	80087d8 <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086ac:	4b51      	ldr	r3, [pc, #324]	@ (80087f4 <xTaskIncrementTick+0x15c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086b4:	4a4f      	ldr	r2, [pc, #316]	@ (80087f4 <xTaskIncrementTick+0x15c>)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d121      	bne.n	8008704 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086c0:	4b4d      	ldr	r3, [pc, #308]	@ (80087f8 <xTaskIncrementTick+0x160>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	603b      	str	r3, [r7, #0]
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	e7fd      	b.n	80086de <xTaskIncrementTick+0x46>
 80086e2:	4b45      	ldr	r3, [pc, #276]	@ (80087f8 <xTaskIncrementTick+0x160>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	4b44      	ldr	r3, [pc, #272]	@ (80087fc <xTaskIncrementTick+0x164>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a42      	ldr	r2, [pc, #264]	@ (80087f8 <xTaskIncrementTick+0x160>)
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	4a42      	ldr	r2, [pc, #264]	@ (80087fc <xTaskIncrementTick+0x164>)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	4b42      	ldr	r3, [pc, #264]	@ (8008800 <xTaskIncrementTick+0x168>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a40      	ldr	r2, [pc, #256]	@ (8008800 <xTaskIncrementTick+0x168>)
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	f000 fade 	bl	8008cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008704:	4b3f      	ldr	r3, [pc, #252]	@ (8008804 <xTaskIncrementTick+0x16c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d349      	bcc.n	80087a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800870e:	4b3a      	ldr	r3, [pc, #232]	@ (80087f8 <xTaskIncrementTick+0x160>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008718:	4b3a      	ldr	r3, [pc, #232]	@ (8008804 <xTaskIncrementTick+0x16c>)
 800871a:	f04f 32ff 	mov.w	r2, #4294967295
 800871e:	601a      	str	r2, [r3, #0]
					break;
 8008720:	e03f      	b.n	80087a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008722:	4b35      	ldr	r3, [pc, #212]	@ (80087f8 <xTaskIncrementTick+0x160>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d203      	bcs.n	8008742 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800873a:	4a32      	ldr	r2, [pc, #200]	@ (8008804 <xTaskIncrementTick+0x16c>)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008740:	e02f      	b.n	80087a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3304      	adds	r3, #4
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fe3e 	bl	80073c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3318      	adds	r3, #24
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fe35 	bl	80073c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008762:	4b29      	ldr	r3, [pc, #164]	@ (8008808 <xTaskIncrementTick+0x170>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d903      	bls.n	8008772 <xTaskIncrementTick+0xda>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	4a26      	ldr	r2, [pc, #152]	@ (8008808 <xTaskIncrementTick+0x170>)
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4a23      	ldr	r2, [pc, #140]	@ (800880c <xTaskIncrementTick+0x174>)
 8008780:	441a      	add	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f7fe fdc0 	bl	800730e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008792:	4b1f      	ldr	r3, [pc, #124]	@ (8008810 <xTaskIncrementTick+0x178>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008798:	429a      	cmp	r2, r3
 800879a:	d3b8      	bcc.n	800870e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a0:	e7b5      	b.n	800870e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008810 <xTaskIncrementTick+0x178>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	4918      	ldr	r1, [pc, #96]	@ (800880c <xTaskIncrementTick+0x174>)
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d901      	bls.n	80087be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80087ba:	2301      	movs	r3, #1
 80087bc:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80087be:	4b15      	ldr	r3, [pc, #84]	@ (8008814 <xTaskIncrementTick+0x17c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 80087c6:	f7f7 fea0 	bl	800050a <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087ca:	4b13      	ldr	r3, [pc, #76]	@ (8008818 <xTaskIncrementTick+0x180>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80087d2:	2301      	movs	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	e006      	b.n	80087e6 <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <xTaskIncrementTick+0x17c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3301      	adds	r3, #1
 80087de:	4a0d      	ldr	r2, [pc, #52]	@ (8008814 <xTaskIncrementTick+0x17c>)
 80087e0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80087e2:	f7f7 fe92 	bl	800050a <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80087e6:	697b      	ldr	r3, [r7, #20]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	200077fc 	.word	0x200077fc
 80087f4:	200077d8 	.word	0x200077d8
 80087f8:	2000778c 	.word	0x2000778c
 80087fc:	20007790 	.word	0x20007790
 8008800:	200077ec 	.word	0x200077ec
 8008804:	200077f4 	.word	0x200077f4
 8008808:	200077dc 	.word	0x200077dc
 800880c:	20007304 	.word	0x20007304
 8008810:	20007300 	.word	0x20007300
 8008814:	200077e4 	.word	0x200077e4
 8008818:	200077e8 	.word	0x200077e8

0800881c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008822:	4b28      	ldr	r3, [pc, #160]	@ (80088c4 <vTaskSwitchContext+0xa8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800882a:	4b27      	ldr	r3, [pc, #156]	@ (80088c8 <vTaskSwitchContext+0xac>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008830:	e042      	b.n	80088b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008832:	4b25      	ldr	r3, [pc, #148]	@ (80088c8 <vTaskSwitchContext+0xac>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b24      	ldr	r3, [pc, #144]	@ (80088cc <vTaskSwitchContext+0xb0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e011      	b.n	8008864 <vTaskSwitchContext+0x48>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <vTaskSwitchContext+0x42>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vTaskSwitchContext+0x3e>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b01      	subs	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	491a      	ldr	r1, [pc, #104]	@ (80088d0 <vTaskSwitchContext+0xb4>)
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0e3      	beq.n	8008840 <vTaskSwitchContext+0x24>
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4a13      	ldr	r2, [pc, #76]	@ (80088d0 <vTaskSwitchContext+0xb4>)
 8008884:	4413      	add	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	3308      	adds	r3, #8
 800889a:	429a      	cmp	r2, r3
 800889c:	d104      	bne.n	80088a8 <vTaskSwitchContext+0x8c>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <vTaskSwitchContext+0xb8>)
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4a06      	ldr	r2, [pc, #24]	@ (80088cc <vTaskSwitchContext+0xb0>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6013      	str	r3, [r2, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	200077fc 	.word	0x200077fc
 80088c8:	200077e8 	.word	0x200077e8
 80088cc:	200077dc 	.word	0x200077dc
 80088d0:	20007304 	.word	0x20007304
 80088d4:	20007300 	.word	0x20007300

080088d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60fb      	str	r3, [r7, #12]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <vTaskPlaceOnEventList+0x48>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3318      	adds	r3, #24
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fe fd24 	bl	8007356 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800890e:	2101      	movs	r1, #1
 8008910:	6838      	ldr	r0, [r7, #0]
 8008912:	f000 fa83 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20007300 	.word	0x20007300

08008924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	617b      	str	r3, [r7, #20]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800894e:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <vTaskPlaceOnEventListRestricted+0x54>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3318      	adds	r3, #24
 8008954:	4619      	mov	r1, r3
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7fe fcd9 	bl	800730e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	68b8      	ldr	r0, [r7, #8]
 800896c:	f000 fa56 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
	}
 8008970:	bf00      	nop
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20007300 	.word	0x20007300

0800897c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60fb      	str	r3, [r7, #12]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fd0a 	bl	80073c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a2c <xTaskRemoveFromEventList+0xb0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11d      	bne.n	80089f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	3304      	adds	r3, #4
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fd01 	bl	80073c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4b19      	ldr	r3, [pc, #100]	@ (8008a30 <xTaskRemoveFromEventList+0xb4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <xTaskRemoveFromEventList+0x5e>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <xTaskRemoveFromEventList+0xb4>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a13      	ldr	r2, [pc, #76]	@ (8008a34 <xTaskRemoveFromEventList+0xb8>)
 80089e8:	441a      	add	r2, r3
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fe fc8c 	bl	800730e <vListInsertEnd>
 80089f6:	e005      	b.n	8008a04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	3318      	adds	r3, #24
 80089fc:	4619      	mov	r1, r3
 80089fe:	480e      	ldr	r0, [pc, #56]	@ (8008a38 <xTaskRemoveFromEventList+0xbc>)
 8008a00:	f7fe fc85 	bl	800730e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <xTaskRemoveFromEventList+0xc0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d905      	bls.n	8008a1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a16:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <xTaskRemoveFromEventList+0xc4>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e001      	b.n	8008a22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a22:	697b      	ldr	r3, [r7, #20]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200077fc 	.word	0x200077fc
 8008a30:	200077dc 	.word	0x200077dc
 8008a34:	20007304 	.word	0x20007304
 8008a38:	20007794 	.word	0x20007794
 8008a3c:	20007300 	.word	0x20007300
 8008a40:	200077e8 	.word	0x200077e8

08008a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a4c:	4b06      	ldr	r3, [pc, #24]	@ (8008a68 <vTaskInternalSetTimeOutState+0x24>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <vTaskInternalSetTimeOutState+0x28>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	605a      	str	r2, [r3, #4]
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	200077ec 	.word	0x200077ec
 8008a6c:	200077d8 	.word	0x200077d8

08008a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60fb      	str	r3, [r7, #12]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ab6:	f000 ff4f 	bl	8009958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008aba:	4b1d      	ldr	r3, [pc, #116]	@ (8008b30 <xTaskCheckForTimeOut+0xc0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d102      	bne.n	8008ada <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	e023      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <xTaskCheckForTimeOut+0xc4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d007      	beq.n	8008af6 <xTaskCheckForTimeOut+0x86>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d302      	bcc.n	8008af6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008af0:	2301      	movs	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e015      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d20b      	bcs.n	8008b18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff99 	bl	8008a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	e004      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b22:	f000 ff4b 	bl	80099bc <vPortExitCritical>

	return xReturn;
 8008b26:	69fb      	ldr	r3, [r7, #28]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	200077d8 	.word	0x200077d8
 8008b34:	200077ec 	.word	0x200077ec

08008b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b3c:	4b03      	ldr	r3, [pc, #12]	@ (8008b4c <vTaskMissedYield+0x14>)
 8008b3e:	2201      	movs	r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
}
 8008b42:	bf00      	nop
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	200077e8 	.word	0x200077e8

08008b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b58:	f000 f854 	bl	8008c04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b5c:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <prvIdleTask+0x2c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d907      	bls.n	8008b74 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <prvIdleTask+0x30>)
 8008b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008b74:	f7f7 fcc2 	bl	80004fc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008b78:	e7ee      	b.n	8008b58 <prvIdleTask+0x8>
 8008b7a:	bf00      	nop
 8008b7c:	20007304 	.word	0x20007304
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
 8008b8e:	e00c      	b.n	8008baa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4a12      	ldr	r2, [pc, #72]	@ (8008be4 <prvInitialiseTaskLists+0x60>)
 8008b9c:	4413      	add	r3, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fb88 	bl	80072b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	607b      	str	r3, [r7, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b37      	cmp	r3, #55	@ 0x37
 8008bae:	d9ef      	bls.n	8008b90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bb0:	480d      	ldr	r0, [pc, #52]	@ (8008be8 <prvInitialiseTaskLists+0x64>)
 8008bb2:	f7fe fb7f 	bl	80072b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bb6:	480d      	ldr	r0, [pc, #52]	@ (8008bec <prvInitialiseTaskLists+0x68>)
 8008bb8:	f7fe fb7c 	bl	80072b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bbc:	480c      	ldr	r0, [pc, #48]	@ (8008bf0 <prvInitialiseTaskLists+0x6c>)
 8008bbe:	f7fe fb79 	bl	80072b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bc2:	480c      	ldr	r0, [pc, #48]	@ (8008bf4 <prvInitialiseTaskLists+0x70>)
 8008bc4:	f7fe fb76 	bl	80072b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bc8:	480b      	ldr	r0, [pc, #44]	@ (8008bf8 <prvInitialiseTaskLists+0x74>)
 8008bca:	f7fe fb73 	bl	80072b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bce:	4b0b      	ldr	r3, [pc, #44]	@ (8008bfc <prvInitialiseTaskLists+0x78>)
 8008bd0:	4a05      	ldr	r2, [pc, #20]	@ (8008be8 <prvInitialiseTaskLists+0x64>)
 8008bd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <prvInitialiseTaskLists+0x7c>)
 8008bd6:	4a05      	ldr	r2, [pc, #20]	@ (8008bec <prvInitialiseTaskLists+0x68>)
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20007304 	.word	0x20007304
 8008be8:	20007764 	.word	0x20007764
 8008bec:	20007778 	.word	0x20007778
 8008bf0:	20007794 	.word	0x20007794
 8008bf4:	200077a8 	.word	0x200077a8
 8008bf8:	200077c0 	.word	0x200077c0
 8008bfc:	2000778c 	.word	0x2000778c
 8008c00:	20007790 	.word	0x20007790

08008c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c0a:	e019      	b.n	8008c40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c0c:	f000 fea4 	bl	8009958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c10:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <prvCheckTasksWaitingTermination+0x50>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fbd3 	bl	80073c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c22:	4b0d      	ldr	r3, [pc, #52]	@ (8008c58 <prvCheckTasksWaitingTermination+0x54>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4a0b      	ldr	r2, [pc, #44]	@ (8008c58 <prvCheckTasksWaitingTermination+0x54>)
 8008c2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <prvCheckTasksWaitingTermination+0x58>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	4a0a      	ldr	r2, [pc, #40]	@ (8008c5c <prvCheckTasksWaitingTermination+0x58>)
 8008c34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c36:	f000 fec1 	bl	80099bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f810 	bl	8008c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c40:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <prvCheckTasksWaitingTermination+0x58>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e1      	bne.n	8008c0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200077a8 	.word	0x200077a8
 8008c58:	200077d4 	.word	0x200077d4
 8008c5c:	200077bc 	.word	0x200077bc

08008c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 f85e 	bl	8009d38 <vPortFree>
				vPortFree( pxTCB );
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f85b 	bl	8009d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c82:	e019      	b.n	8008cb8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d103      	bne.n	8008c96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f852 	bl	8009d38 <vPortFree>
	}
 8008c94:	e010      	b.n	8008cb8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d00b      	beq.n	8008cb8 <prvDeleteTCB+0x58>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60fb      	str	r3, [r7, #12]
}
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	e7fd      	b.n	8008cb4 <prvDeleteTCB+0x54>
	}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <prvResetNextTaskUnblockTime+0x38>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008cfc <prvResetNextTaskUnblockTime+0x3c>)
 8008cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cd8:	e008      	b.n	8008cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cda:	4b07      	ldr	r3, [pc, #28]	@ (8008cf8 <prvResetNextTaskUnblockTime+0x38>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4a04      	ldr	r2, [pc, #16]	@ (8008cfc <prvResetNextTaskUnblockTime+0x3c>)
 8008cea:	6013      	str	r3, [r2, #0]
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	2000778c 	.word	0x2000778c
 8008cfc:	200077f4 	.word	0x200077f4

08008d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <xTaskGetSchedulerState+0x34>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	e008      	b.n	8008d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d14:	4b08      	ldr	r3, [pc, #32]	@ (8008d38 <xTaskGetSchedulerState+0x38>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	607b      	str	r3, [r7, #4]
 8008d20:	e001      	b.n	8008d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d22:	2300      	movs	r3, #0
 8008d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d26:	687b      	ldr	r3, [r7, #4]
	}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	200077e0 	.word	0x200077e0
 8008d38:	200077fc 	.word	0x200077fc

08008d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d058      	beq.n	8008e04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d52:	4b2f      	ldr	r3, [pc, #188]	@ (8008e10 <xTaskPriorityDisinherit+0xd4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d00b      	beq.n	8008d74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	60bb      	str	r3, [r7, #8]
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	e7fd      	b.n	8008d90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d98:	1e5a      	subs	r2, r3, #1
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d02c      	beq.n	8008e04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d128      	bne.n	8008e04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fb06 	bl	80073c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008e14 <xTaskPriorityDisinherit+0xd8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d903      	bls.n	8008de4 <xTaskPriorityDisinherit+0xa8>
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	4a0c      	ldr	r2, [pc, #48]	@ (8008e14 <xTaskPriorityDisinherit+0xd8>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a09      	ldr	r2, [pc, #36]	@ (8008e18 <xTaskPriorityDisinherit+0xdc>)
 8008df2:	441a      	add	r2, r3
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7fe fa87 	bl	800730e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e04:	697b      	ldr	r3, [r7, #20]
	}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20007300 	.word	0x20007300
 8008e14:	200077dc 	.word	0x200077dc
 8008e18:	20007304 	.word	0x20007304

08008e1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e26:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x90>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e2c:	4b20      	ldr	r3, [pc, #128]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fac8 	bl	80073c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d10a      	bne.n	8008e56 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e46:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4819      	ldr	r0, [pc, #100]	@ (8008eb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e50:	f7fe fa5d 	bl	800730e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e54:	e026      	b.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e5e:	4b14      	ldr	r3, [pc, #80]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d209      	bcs.n	8008e82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e6e:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe fa6b 	bl	8007356 <vListInsert>
}
 8008e80:	e010      	b.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e82:	4b0e      	ldr	r3, [pc, #56]	@ (8008ebc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe fa61 	bl	8007356 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d202      	bcs.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e9e:	4a08      	ldr	r2, [pc, #32]	@ (8008ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6013      	str	r3, [r2, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200077d8 	.word	0x200077d8
 8008eb0:	20007300 	.word	0x20007300
 8008eb4:	200077c0 	.word	0x200077c0
 8008eb8:	20007790 	.word	0x20007790
 8008ebc:	2000778c 	.word	0x2000778c
 8008ec0:	200077f4 	.word	0x200077f4

08008ec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	@ 0x28
 8008ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ece:	f000 fbb1 	bl	8009634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f48 <xTimerCreateTimerTask+0x84>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d021      	beq.n	8008f1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ee2:	1d3a      	adds	r2, r7, #4
 8008ee4:	f107 0108 	add.w	r1, r7, #8
 8008ee8:	f107 030c 	add.w	r3, r7, #12
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fe f9c7 	bl	8007280 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	2302      	movs	r3, #2
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	460a      	mov	r2, r1
 8008f04:	4911      	ldr	r1, [pc, #68]	@ (8008f4c <xTimerCreateTimerTask+0x88>)
 8008f06:	4812      	ldr	r0, [pc, #72]	@ (8008f50 <xTimerCreateTimerTask+0x8c>)
 8008f08:	f7ff f8c6 	bl	8008098 <xTaskCreateStatic>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	4a11      	ldr	r2, [pc, #68]	@ (8008f54 <xTimerCreateTimerTask+0x90>)
 8008f10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f12:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <xTimerCreateTimerTask+0x90>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	613b      	str	r3, [r7, #16]
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f3c:	697b      	ldr	r3, [r7, #20]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20007830 	.word	0x20007830
 8008f4c:	0800a138 	.word	0x0800a138
 8008f50:	080091cd 	.word	0x080091cd
 8008f54:	20007834 	.word	0x20007834

08008f58 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008f66:	202c      	movs	r0, #44	@ 0x2c
 8008f68:	f000 fe18 	bl	8009b9c <pvPortMalloc>
 8008f6c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00d      	beq.n	8008f90 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f845 	bl	800901a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008f90:	697b      	ldr	r3, [r7, #20]
	}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08a      	sub	sp, #40	@ 0x28
 8008f9e:	af02      	add	r7, sp, #8
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008fa8:	232c      	movs	r3, #44	@ 0x2c
 8008faa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b2c      	cmp	r3, #44	@ 0x2c
 8008fb0:	d00b      	beq.n	8008fca <xTimerCreateStatic+0x30>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	61bb      	str	r3, [r7, #24]
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10b      	bne.n	8008fea <xTimerCreateStatic+0x50>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	617b      	str	r3, [r7, #20]
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	e7fd      	b.n	8008fe6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00d      	beq.n	8009010 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f805 	bl	800901a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009010:	69fb      	ldr	r3, [r7, #28]
	}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	617b      	str	r3, [r7, #20]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01e      	beq.n	800908a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800904c:	f000 faf2 	bl	8009634 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	6a3a      	ldr	r2, [r7, #32]
 8009066:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe f941 	bl	80072f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800907e:	f043 0304 	orr.w	r3, r3, #4
 8009082:	b2da      	uxtb	r2, r3
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800908a:	bf00      	nop
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08a      	sub	sp, #40	@ 0x28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	623b      	str	r3, [r7, #32]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090c4:	4b19      	ldr	r3, [pc, #100]	@ (800912c <xTimerGenericCommand+0x98>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02a      	beq.n	8009122 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b05      	cmp	r3, #5
 80090dc:	dc18      	bgt.n	8009110 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090de:	f7ff fe0f 	bl	8008d00 <xTaskGetSchedulerState>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d109      	bne.n	80090fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <xTimerGenericCommand+0x98>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	f107 0110 	add.w	r1, r7, #16
 80090f0:	2300      	movs	r3, #0
 80090f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f4:	f7fe fb92 	bl	800781c <xQueueGenericSend>
 80090f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80090fa:	e012      	b.n	8009122 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090fc:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <xTimerGenericCommand+0x98>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	f107 0110 	add.w	r1, r7, #16
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	f7fe fb88 	bl	800781c <xQueueGenericSend>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24
 800910e:	e008      	b.n	8009122 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009110:	4b06      	ldr	r3, [pc, #24]	@ (800912c <xTimerGenericCommand+0x98>)
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	f107 0110 	add.w	r1, r7, #16
 8009118:	2300      	movs	r3, #0
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	f7fe fc80 	bl	8007a20 <xQueueGenericSendFromISR>
 8009120:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009124:	4618      	mov	r0, r3
 8009126:	3728      	adds	r7, #40	@ 0x28
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20007830 	.word	0x20007830

08009130 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913a:	4b23      	ldr	r3, [pc, #140]	@ (80091c8 <prvProcessExpiredTimer+0x98>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	3304      	adds	r3, #4
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe f93d 	bl	80073c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d023      	beq.n	80091a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	18d1      	adds	r1, r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f000 f8d5 	bl	8009318 <prvInsertTimerInActiveList>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d020      	beq.n	80091b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009174:	2300      	movs	r3, #0
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	2100      	movs	r1, #0
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f7ff ff88 	bl	8009094 <xTimerGenericCommand>
 8009184:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d114      	bne.n	80091b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60fb      	str	r3, [r7, #12]
}
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	e7fd      	b.n	80091a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091aa:	f023 0301 	bic.w	r3, r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	6978      	ldr	r0, [r7, #20]
 80091bc:	4798      	blx	r3
}
 80091be:	bf00      	nop
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20007828 	.word	0x20007828

080091cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f859 	bl	8009290 <prvGetNextExpireTime>
 80091de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4619      	mov	r1, r3
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 f805 	bl	80091f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091ea:	f000 f8d7 	bl	800939c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091ee:	bf00      	nop
 80091f0:	e7f0      	b.n	80091d4 <prvTimerTask+0x8>
	...

080091f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091fe:	f7ff f98f 	bl	8008520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009202:	f107 0308 	add.w	r3, r7, #8
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f866 	bl	80092d8 <prvSampleTimeNow>
 800920c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d130      	bne.n	8009276 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <prvProcessTimerOrBlockTask+0x3c>
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	429a      	cmp	r2, r3
 8009220:	d806      	bhi.n	8009230 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009222:	f7ff f98b 	bl	800853c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009226:	68f9      	ldr	r1, [r7, #12]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ff81 	bl	8009130 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800922e:	e024      	b.n	800927a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d008      	beq.n	8009248 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009236:	4b13      	ldr	r3, [pc, #76]	@ (8009284 <prvProcessTimerOrBlockTask+0x90>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <prvProcessTimerOrBlockTask+0x50>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <prvProcessTimerOrBlockTask+0x52>
 8009244:	2300      	movs	r3, #0
 8009246:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009248:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <prvProcessTimerOrBlockTask+0x94>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	4619      	mov	r1, r3
 8009256:	f7fe feeb 	bl	8008030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800925a:	f7ff f96f 	bl	800853c <xTaskResumeAll>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009264:	4b09      	ldr	r3, [pc, #36]	@ (800928c <prvProcessTimerOrBlockTask+0x98>)
 8009266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	f3bf 8f6f 	isb	sy
}
 8009274:	e001      	b.n	800927a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009276:	f7ff f961 	bl	800853c <xTaskResumeAll>
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	2000782c 	.word	0x2000782c
 8009288:	20007830 	.word	0x20007830
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009298:	4b0e      	ldr	r3, [pc, #56]	@ (80092d4 <prvGetNextExpireTime+0x44>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <prvGetNextExpireTime+0x16>
 80092a2:	2201      	movs	r2, #1
 80092a4:	e000      	b.n	80092a8 <prvGetNextExpireTime+0x18>
 80092a6:	2200      	movs	r2, #0
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b4:	4b07      	ldr	r3, [pc, #28]	@ (80092d4 <prvGetNextExpireTime+0x44>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	e001      	b.n	80092c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20007828 	.word	0x20007828

080092d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092e0:	f7ff f9ca 	bl	8008678 <xTaskGetTickCount>
 80092e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009314 <prvSampleTimeNow+0x3c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d205      	bcs.n	80092fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092f0:	f000 f93a 	bl	8009568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e002      	b.n	8009302 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009302:	4a04      	ldr	r2, [pc, #16]	@ (8009314 <prvSampleTimeNow+0x3c>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009308:	68fb      	ldr	r3, [r7, #12]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20007838 	.word	0x20007838

08009318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	429a      	cmp	r2, r3
 800933c:	d812      	bhi.n	8009364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	429a      	cmp	r2, r3
 800934a:	d302      	bcc.n	8009352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800934c:	2301      	movs	r3, #1
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e01b      	b.n	800938a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009352:	4b10      	ldr	r3, [pc, #64]	@ (8009394 <prvInsertTimerInActiveList+0x7c>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3304      	adds	r3, #4
 800935a:	4619      	mov	r1, r3
 800935c:	4610      	mov	r0, r2
 800935e:	f7fd fffa 	bl	8007356 <vListInsert>
 8009362:	e012      	b.n	800938a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d206      	bcs.n	800937a <prvInsertTimerInActiveList+0x62>
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d302      	bcc.n	800937a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009374:	2301      	movs	r3, #1
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e007      	b.n	800938a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800937a:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <prvInsertTimerInActiveList+0x80>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3304      	adds	r3, #4
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f7fd ffe6 	bl	8007356 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800938a:	697b      	ldr	r3, [r7, #20]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	2000782c 	.word	0x2000782c
 8009398:	20007828 	.word	0x20007828

0800939c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	@ 0x38
 80093a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093a2:	e0ce      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da19      	bge.n	80093de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093aa:	1d3b      	adds	r3, r7, #4
 80093ac:	3304      	adds	r3, #4
 80093ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	61fb      	str	r3, [r7, #28]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d4:	6850      	ldr	r0, [r2, #4]
 80093d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d8:	6892      	ldr	r2, [r2, #8]
 80093da:	4611      	mov	r1, r2
 80093dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f2c0 80ae 	blt.w	8009542 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fd ffe6 	bl	80073c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093fc:	463b      	mov	r3, r7
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff ff6a 	bl	80092d8 <prvSampleTimeNow>
 8009404:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b09      	cmp	r3, #9
 800940a:	f200 8097 	bhi.w	800953c <prvProcessReceivedCommands+0x1a0>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <prvProcessReceivedCommands+0x78>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	0800943d 	.word	0x0800943d
 8009418:	0800943d 	.word	0x0800943d
 800941c:	0800943d 	.word	0x0800943d
 8009420:	080094b3 	.word	0x080094b3
 8009424:	080094c7 	.word	0x080094c7
 8009428:	08009513 	.word	0x08009513
 800942c:	0800943d 	.word	0x0800943d
 8009430:	0800943d 	.word	0x0800943d
 8009434:	080094b3 	.word	0x080094b3
 8009438:	080094c7 	.word	0x080094c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	18d1      	adds	r1, r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800945c:	f7ff ff5c 	bl	8009318 <prvInsertTimerInActiveList>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d06c      	beq.n	8009540 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800946c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d061      	beq.n	8009540 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	441a      	add	r2, r3
 8009484:	2300      	movs	r3, #0
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	2100      	movs	r1, #0
 800948c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800948e:	f7ff fe01 	bl	8009094 <xTimerGenericCommand>
 8009492:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d152      	bne.n	8009540 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	61bb      	str	r3, [r7, #24]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094c4:	e03d      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094cc:	f043 0301 	orr.w	r3, r3, #1
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	617b      	str	r3, [r7, #20]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	18d1      	adds	r1, r2, r3
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800950a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800950c:	f7ff ff04 	bl	8009318 <prvInsertTimerInActiveList>
					break;
 8009510:	e017      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009522:	f000 fc09 	bl	8009d38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009526:	e00c      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009536:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800953a:	e002      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800953c:	bf00      	nop
 800953e:	e000      	b.n	8009542 <prvProcessReceivedCommands+0x1a6>
					break;
 8009540:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009542:	4b08      	ldr	r3, [pc, #32]	@ (8009564 <prvProcessReceivedCommands+0x1c8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	1d39      	adds	r1, r7, #4
 8009548:	2200      	movs	r2, #0
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fb06 	bl	8007b5c <xQueueReceive>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	f47f af26 	bne.w	80093a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	3730      	adds	r7, #48	@ 0x30
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20007830 	.word	0x20007830

08009568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800956e:	e049      	b.n	8009604 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009570:	4b2e      	ldr	r3, [pc, #184]	@ (800962c <prvSwitchTimerLists+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957a:	4b2c      	ldr	r3, [pc, #176]	@ (800962c <prvSwitchTimerLists+0xc4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3304      	adds	r3, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd ff1d 	bl	80073c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02f      	beq.n	8009604 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4413      	add	r3, r2
 80095ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d90e      	bls.n	80095d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095c2:	4b1a      	ldr	r3, [pc, #104]	@ (800962c <prvSwitchTimerLists+0xc4>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f7fd fec2 	bl	8007356 <vListInsert>
 80095d2:	e017      	b.n	8009604 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d4:	2300      	movs	r3, #0
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	2300      	movs	r3, #0
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fd58 	bl	8009094 <xTimerGenericCommand>
 80095e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10b      	bne.n	8009604 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	603b      	str	r3, [r7, #0]
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	e7fd      	b.n	8009600 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009604:	4b09      	ldr	r3, [pc, #36]	@ (800962c <prvSwitchTimerLists+0xc4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1b0      	bne.n	8009570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800960e:	4b07      	ldr	r3, [pc, #28]	@ (800962c <prvSwitchTimerLists+0xc4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009614:	4b06      	ldr	r3, [pc, #24]	@ (8009630 <prvSwitchTimerLists+0xc8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a04      	ldr	r2, [pc, #16]	@ (800962c <prvSwitchTimerLists+0xc4>)
 800961a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800961c:	4a04      	ldr	r2, [pc, #16]	@ (8009630 <prvSwitchTimerLists+0xc8>)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6013      	str	r3, [r2, #0]
}
 8009622:	bf00      	nop
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20007828 	.word	0x20007828
 8009630:	2000782c 	.word	0x2000782c

08009634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800963a:	f000 f98d 	bl	8009958 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800963e:	4b15      	ldr	r3, [pc, #84]	@ (8009694 <prvCheckForValidListAndQueue+0x60>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d120      	bne.n	8009688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009646:	4814      	ldr	r0, [pc, #80]	@ (8009698 <prvCheckForValidListAndQueue+0x64>)
 8009648:	f7fd fe34 	bl	80072b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800964c:	4813      	ldr	r0, [pc, #76]	@ (800969c <prvCheckForValidListAndQueue+0x68>)
 800964e:	f7fd fe31 	bl	80072b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009652:	4b13      	ldr	r3, [pc, #76]	@ (80096a0 <prvCheckForValidListAndQueue+0x6c>)
 8009654:	4a10      	ldr	r2, [pc, #64]	@ (8009698 <prvCheckForValidListAndQueue+0x64>)
 8009656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009658:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <prvCheckForValidListAndQueue+0x70>)
 800965a:	4a10      	ldr	r2, [pc, #64]	@ (800969c <prvCheckForValidListAndQueue+0x68>)
 800965c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800965e:	2300      	movs	r3, #0
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4b11      	ldr	r3, [pc, #68]	@ (80096a8 <prvCheckForValidListAndQueue+0x74>)
 8009664:	4a11      	ldr	r2, [pc, #68]	@ (80096ac <prvCheckForValidListAndQueue+0x78>)
 8009666:	2110      	movs	r1, #16
 8009668:	200a      	movs	r0, #10
 800966a:	f7fd ff41 	bl	80074f0 <xQueueGenericCreateStatic>
 800966e:	4603      	mov	r3, r0
 8009670:	4a08      	ldr	r2, [pc, #32]	@ (8009694 <prvCheckForValidListAndQueue+0x60>)
 8009672:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009674:	4b07      	ldr	r3, [pc, #28]	@ (8009694 <prvCheckForValidListAndQueue+0x60>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <prvCheckForValidListAndQueue+0x60>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	490b      	ldr	r1, [pc, #44]	@ (80096b0 <prvCheckForValidListAndQueue+0x7c>)
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fc80 	bl	8007f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009688:	f000 f998 	bl	80099bc <vPortExitCritical>
}
 800968c:	bf00      	nop
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20007830 	.word	0x20007830
 8009698:	20007800 	.word	0x20007800
 800969c:	20007814 	.word	0x20007814
 80096a0:	20007828 	.word	0x20007828
 80096a4:	2000782c 	.word	0x2000782c
 80096a8:	200078dc 	.word	0x200078dc
 80096ac:	2000783c 	.word	0x2000783c
 80096b0:	0800a140 	.word	0x0800a140

080096b4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <pvTimerGetTimerID+0x2a>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60fb      	str	r3, [r7, #12]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80096de:	f000 f93b 	bl	8009958 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80096e8:	f000 f968 	bl	80099bc <vPortExitCritical>

	return pvReturn;
 80096ec:	693b      	ldr	r3, [r7, #16]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3b04      	subs	r3, #4
 8009708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b04      	subs	r3, #4
 8009716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f023 0201 	bic.w	r2, r3, #1
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3b04      	subs	r3, #4
 8009726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009728:	4a0c      	ldr	r2, [pc, #48]	@ (800975c <pxPortInitialiseStack+0x64>)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b14      	subs	r3, #20
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b04      	subs	r3, #4
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f06f 0202 	mvn.w	r2, #2
 8009746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3b20      	subs	r3, #32
 800974c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800974e:	68fb      	ldr	r3, [r7, #12]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	08009761 	.word	0x08009761

08009760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <prvTaskExitError+0x58>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d00b      	beq.n	800978c <prvTaskExitError+0x2c>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <prvTaskExitError+0x28>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60bb      	str	r3, [r7, #8]
}
 800979e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097a0:	bf00      	nop
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0fc      	beq.n	80097a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	2000000c 	.word	0x2000000c
 80097bc:	00000000 	.word	0x00000000

080097c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	4770      	bx	lr
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst2>:
 80097e0:	20007300 	.word	0x20007300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097e8:	4808      	ldr	r0, [pc, #32]	@ (800980c <prvPortStartFirstTask+0x24>)
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f380 8808 	msr	MSP, r0
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8814 	msr	CONTROL, r0
 80097fa:	b662      	cpsie	i
 80097fc:	b661      	cpsie	f
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	df00      	svc	0
 8009808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800980a:	bf00      	nop
 800980c:	e000ed08 	.word	0xe000ed08

08009810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009816:	4b47      	ldr	r3, [pc, #284]	@ (8009934 <xPortStartScheduler+0x124>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a47      	ldr	r2, [pc, #284]	@ (8009938 <xPortStartScheduler+0x128>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10b      	bne.n	8009838 <xPortStartScheduler+0x28>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009838:	4b3e      	ldr	r3, [pc, #248]	@ (8009934 <xPortStartScheduler+0x124>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a3f      	ldr	r2, [pc, #252]	@ (800993c <xPortStartScheduler+0x12c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d10b      	bne.n	800985a <xPortStartScheduler+0x4a>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	613b      	str	r3, [r7, #16]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800985a:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <xPortStartScheduler+0x130>)
 800985c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	22ff      	movs	r2, #255	@ 0xff
 800986a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800987c:	b2da      	uxtb	r2, r3
 800987e:	4b31      	ldr	r3, [pc, #196]	@ (8009944 <xPortStartScheduler+0x134>)
 8009880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009882:	4b31      	ldr	r3, [pc, #196]	@ (8009948 <xPortStartScheduler+0x138>)
 8009884:	2207      	movs	r2, #7
 8009886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009888:	e009      	b.n	800989e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800988a:	4b2f      	ldr	r3, [pc, #188]	@ (8009948 <xPortStartScheduler+0x138>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	4a2d      	ldr	r2, [pc, #180]	@ (8009948 <xPortStartScheduler+0x138>)
 8009892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a6:	2b80      	cmp	r3, #128	@ 0x80
 80098a8:	d0ef      	beq.n	800988a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098aa:	4b27      	ldr	r3, [pc, #156]	@ (8009948 <xPortStartScheduler+0x138>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1c3 0307 	rsb	r3, r3, #7
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d00b      	beq.n	80098ce <xPortStartScheduler+0xbe>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	60bb      	str	r3, [r7, #8]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009948 <xPortStartScheduler+0x138>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009948 <xPortStartScheduler+0x138>)
 80098d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009948 <xPortStartScheduler+0x138>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098e0:	4a19      	ldr	r2, [pc, #100]	@ (8009948 <xPortStartScheduler+0x138>)
 80098e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098ec:	4b17      	ldr	r3, [pc, #92]	@ (800994c <xPortStartScheduler+0x13c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a16      	ldr	r2, [pc, #88]	@ (800994c <xPortStartScheduler+0x13c>)
 80098f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098f8:	4b14      	ldr	r3, [pc, #80]	@ (800994c <xPortStartScheduler+0x13c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a13      	ldr	r2, [pc, #76]	@ (800994c <xPortStartScheduler+0x13c>)
 80098fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009904:	f000 f8da 	bl	8009abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009908:	4b11      	ldr	r3, [pc, #68]	@ (8009950 <xPortStartScheduler+0x140>)
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800990e:	f000 f8f9 	bl	8009b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009912:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <xPortStartScheduler+0x144>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a0f      	ldr	r2, [pc, #60]	@ (8009954 <xPortStartScheduler+0x144>)
 8009918:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800991c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800991e:	f7ff ff63 	bl	80097e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009922:	f7fe ff7b 	bl	800881c <vTaskSwitchContext>
	prvTaskExitError();
 8009926:	f7ff ff1b 	bl	8009760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed00 	.word	0xe000ed00
 8009938:	410fc271 	.word	0x410fc271
 800993c:	410fc270 	.word	0x410fc270
 8009940:	e000e400 	.word	0xe000e400
 8009944:	2000792c 	.word	0x2000792c
 8009948:	20007930 	.word	0x20007930
 800994c:	e000ed20 	.word	0xe000ed20
 8009950:	2000000c 	.word	0x2000000c
 8009954:	e000ef34 	.word	0xe000ef34

08009958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009972:	4b10      	ldr	r3, [pc, #64]	@ (80099b4 <vPortEnterCritical+0x5c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3301      	adds	r3, #1
 8009978:	4a0e      	ldr	r2, [pc, #56]	@ (80099b4 <vPortEnterCritical+0x5c>)
 800997a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800997c:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <vPortEnterCritical+0x5c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d110      	bne.n	80099a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <vPortEnterCritical+0x60>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	603b      	str	r3, [r7, #0]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vPortEnterCritical+0x4a>
	}
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	2000000c 	.word	0x2000000c
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099c2:	4b12      	ldr	r3, [pc, #72]	@ (8009a0c <vPortExitCritical+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10b      	bne.n	80099e2 <vPortExitCritical+0x26>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	607b      	str	r3, [r7, #4]
}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	e7fd      	b.n	80099de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099e2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a0c <vPortExitCritical+0x50>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4a08      	ldr	r2, [pc, #32]	@ (8009a0c <vPortExitCritical+0x50>)
 80099ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099ec:	4b07      	ldr	r3, [pc, #28]	@ (8009a0c <vPortExitCritical+0x50>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <vPortExitCritical+0x44>
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	2000000c 	.word	0x2000000c

08009a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a10:	f3ef 8009 	mrs	r0, PSP
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4b15      	ldr	r3, [pc, #84]	@ (8009a70 <pxCurrentTCBConst>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f01e 0f10 	tst.w	lr, #16
 8009a20:	bf08      	it	eq
 8009a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	6010      	str	r0, [r2, #0]
 8009a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a34:	f380 8811 	msr	BASEPRI, r0
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f7fe feec 	bl	800881c <vTaskSwitchContext>
 8009a44:	f04f 0000 	mov.w	r0, #0
 8009a48:	f380 8811 	msr	BASEPRI, r0
 8009a4c:	bc09      	pop	{r0, r3}
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	6808      	ldr	r0, [r1, #0]
 8009a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a56:	f01e 0f10 	tst.w	lr, #16
 8009a5a:	bf08      	it	eq
 8009a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a60:	f380 8809 	msr	PSP, r0
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst>:
 8009a70:	20007300 	.word	0x20007300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a92:	f7fe fe01 	bl	8008698 <xTaskIncrementTick>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	@ (8009ab8 <xPortSysTickHandler+0x40>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	f383 8811 	msr	BASEPRI, r3
}
 8009aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <vPortSetupTimerInterrupt+0x38>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009acc:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <vPortSetupTimerInterrupt+0x3c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8009afc <vPortSetupTimerInterrupt+0x40>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	099b      	lsrs	r3, r3, #6
 8009ad8:	4a09      	ldr	r2, [pc, #36]	@ (8009b00 <vPortSetupTimerInterrupt+0x44>)
 8009ada:	3b01      	subs	r3, #1
 8009adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ade:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	e000e010 	.word	0xe000e010
 8009af4:	e000e018 	.word	0xe000e018
 8009af8:	20000000 	.word	0x20000000
 8009afc:	10624dd3 	.word	0x10624dd3
 8009b00:	e000e014 	.word	0xe000e014

08009b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b14 <vPortEnableVFP+0x10>
 8009b08:	6801      	ldr	r1, [r0, #0]
 8009b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b0e:	6001      	str	r1, [r0, #0]
 8009b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b12:	bf00      	nop
 8009b14:	e000ed88 	.word	0xe000ed88

08009b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b0f      	cmp	r3, #15
 8009b28:	d915      	bls.n	8009b56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b2a:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <vPortValidateInterruptPriority+0x74>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b34:	4b16      	ldr	r3, [pc, #88]	@ (8009b90 <vPortValidateInterruptPriority+0x78>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	7afa      	ldrb	r2, [r7, #11]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d20b      	bcs.n	8009b56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	607b      	str	r3, [r7, #4]
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	e7fd      	b.n	8009b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b56:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <vPortValidateInterruptPriority+0x7c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b98 <vPortValidateInterruptPriority+0x80>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d90b      	bls.n	8009b7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	603b      	str	r3, [r7, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vPortValidateInterruptPriority+0x62>
	}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	e000e3f0 	.word	0xe000e3f0
 8009b90:	2000792c 	.word	0x2000792c
 8009b94:	e000ed0c 	.word	0xe000ed0c
 8009b98:	20007930 	.word	0x20007930

08009b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	@ 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ba8:	f7fe fcba 	bl	8008520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bac:	4b5c      	ldr	r3, [pc, #368]	@ (8009d20 <pvPortMalloc+0x184>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bb4:	f000 f924 	bl	8009e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d24 <pvPortMalloc+0x188>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 8095 	bne.w	8009cf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01e      	beq.n	8009c0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bcc:	2208      	movs	r2, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d015      	beq.n	8009c0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f023 0307 	bic.w	r3, r3, #7
 8009be4:	3308      	adds	r3, #8
 8009be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <pvPortMalloc+0x6e>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	617b      	str	r3, [r7, #20]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d06f      	beq.n	8009cf0 <pvPortMalloc+0x154>
 8009c10:	4b45      	ldr	r3, [pc, #276]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d86a      	bhi.n	8009cf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c1a:	4b44      	ldr	r3, [pc, #272]	@ (8009d2c <pvPortMalloc+0x190>)
 8009c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c1e:	4b43      	ldr	r3, [pc, #268]	@ (8009d2c <pvPortMalloc+0x190>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c24:	e004      	b.n	8009c30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d903      	bls.n	8009c42 <pvPortMalloc+0xa6>
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1f1      	bne.n	8009c26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c42:	4b37      	ldr	r3, [pc, #220]	@ (8009d20 <pvPortMalloc+0x184>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d051      	beq.n	8009cf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2208      	movs	r2, #8
 8009c52:	4413      	add	r3, r2
 8009c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1ad2      	subs	r2, r2, r3
 8009c66:	2308      	movs	r3, #8
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d920      	bls.n	8009cb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4413      	add	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <pvPortMalloc+0xfc>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009caa:	69b8      	ldr	r0, [r7, #24]
 8009cac:	f000 f90a 	bl	8009ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d30 <pvPortMalloc+0x194>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d203      	bcs.n	8009cd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cca:	4b17      	ldr	r3, [pc, #92]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a18      	ldr	r2, [pc, #96]	@ (8009d30 <pvPortMalloc+0x194>)
 8009cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <pvPortMalloc+0x188>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ce6:	4b13      	ldr	r3, [pc, #76]	@ (8009d34 <pvPortMalloc+0x198>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a11      	ldr	r2, [pc, #68]	@ (8009d34 <pvPortMalloc+0x198>)
 8009cee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cf0:	f7fe fc24 	bl	800853c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00b      	beq.n	8009d16 <pvPortMalloc+0x17a>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	60fb      	str	r3, [r7, #12]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <pvPortMalloc+0x176>
	return pvReturn;
 8009d16:	69fb      	ldr	r3, [r7, #28]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3728      	adds	r7, #40	@ 0x28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	2000c93c 	.word	0x2000c93c
 8009d24:	2000c950 	.word	0x2000c950
 8009d28:	2000c940 	.word	0x2000c940
 8009d2c:	2000c934 	.word	0x2000c934
 8009d30:	2000c944 	.word	0x2000c944
 8009d34:	2000c948 	.word	0x2000c948

08009d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d04f      	beq.n	8009dea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	425b      	negs	r3, r3
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	4b25      	ldr	r3, [pc, #148]	@ (8009df4 <vPortFree+0xbc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4013      	ands	r3, r2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10b      	bne.n	8009d7e <vPortFree+0x46>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	60fb      	str	r3, [r7, #12]
}
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
 8009d7c:	e7fd      	b.n	8009d7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <vPortFree+0x66>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	4b14      	ldr	r3, [pc, #80]	@ (8009df4 <vPortFree+0xbc>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01e      	beq.n	8009dea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11a      	bne.n	8009dea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <vPortFree+0xbc>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	401a      	ands	r2, r3
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dc4:	f7fe fbac 	bl	8008520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009df8 <vPortFree+0xc0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	4a09      	ldr	r2, [pc, #36]	@ (8009df8 <vPortFree+0xc0>)
 8009dd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dd6:	6938      	ldr	r0, [r7, #16]
 8009dd8:	f000 f874 	bl	8009ec4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ddc:	4b07      	ldr	r3, [pc, #28]	@ (8009dfc <vPortFree+0xc4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a06      	ldr	r2, [pc, #24]	@ (8009dfc <vPortFree+0xc4>)
 8009de4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009de6:	f7fe fba9 	bl	800853c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dea:	bf00      	nop
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000c950 	.word	0x2000c950
 8009df8:	2000c940 	.word	0x2000c940
 8009dfc:	2000c94c 	.word	0x2000c94c

08009e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e06:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8009e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e0c:	4b27      	ldr	r3, [pc, #156]	@ (8009eac <prvHeapInit+0xac>)
 8009e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3307      	adds	r3, #7
 8009e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009eac <prvHeapInit+0xac>)
 8009e30:	4413      	add	r3, r2
 8009e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e38:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb0 <prvHeapInit+0xb0>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb0 <prvHeapInit+0xb0>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	4413      	add	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e62:	4b14      	ldr	r3, [pc, #80]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e6a:	4b12      	ldr	r3, [pc, #72]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	1ad2      	subs	r2, r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e80:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb8 <prvHeapInit+0xb8>)
 8009e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4a09      	ldr	r2, [pc, #36]	@ (8009ebc <prvHeapInit+0xbc>)
 8009e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e98:	4b09      	ldr	r3, [pc, #36]	@ (8009ec0 <prvHeapInit+0xc0>)
 8009e9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e9e:	601a      	str	r2, [r3, #0]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20007934 	.word	0x20007934
 8009eb0:	2000c934 	.word	0x2000c934
 8009eb4:	2000c93c 	.word	0x2000c93c
 8009eb8:	2000c944 	.word	0x2000c944
 8009ebc:	2000c940 	.word	0x2000c940
 8009ec0:	2000c950 	.word	0x2000c950

08009ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ecc:	4b28      	ldr	r3, [pc, #160]	@ (8009f70 <prvInsertBlockIntoFreeList+0xac>)
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e002      	b.n	8009ed8 <prvInsertBlockIntoFreeList+0x14>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d8f7      	bhi.n	8009ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d108      	bne.n	8009f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	441a      	add	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d118      	bne.n	8009f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b15      	ldr	r3, [pc, #84]	@ (8009f74 <prvInsertBlockIntoFreeList+0xb0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d00d      	beq.n	8009f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	441a      	add	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e008      	b.n	8009f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f42:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <prvInsertBlockIntoFreeList+0xb0>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e003      	b.n	8009f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d002      	beq.n	8009f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	2000c934 	.word	0x2000c934
 8009f74:	2000c93c 	.word	0x2000c93c

08009f78 <memset>:
 8009f78:	4402      	add	r2, r0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d100      	bne.n	8009f82 <memset+0xa>
 8009f80:	4770      	bx	lr
 8009f82:	f803 1b01 	strb.w	r1, [r3], #1
 8009f86:	e7f9      	b.n	8009f7c <memset+0x4>

08009f88 <__libc_init_array>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8009fc0 <__libc_init_array+0x38>)
 8009f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8009fc4 <__libc_init_array+0x3c>)
 8009f8e:	1b64      	subs	r4, r4, r5
 8009f90:	10a4      	asrs	r4, r4, #2
 8009f92:	2600      	movs	r6, #0
 8009f94:	42a6      	cmp	r6, r4
 8009f96:	d109      	bne.n	8009fac <__libc_init_array+0x24>
 8009f98:	4d0b      	ldr	r5, [pc, #44]	@ (8009fc8 <__libc_init_array+0x40>)
 8009f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8009fcc <__libc_init_array+0x44>)
 8009f9c:	f000 f826 	bl	8009fec <_init>
 8009fa0:	1b64      	subs	r4, r4, r5
 8009fa2:	10a4      	asrs	r4, r4, #2
 8009fa4:	2600      	movs	r6, #0
 8009fa6:	42a6      	cmp	r6, r4
 8009fa8:	d105      	bne.n	8009fb6 <__libc_init_array+0x2e>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb0:	4798      	blx	r3
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7ee      	b.n	8009f94 <__libc_init_array+0xc>
 8009fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fba:	4798      	blx	r3
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	e7f2      	b.n	8009fa6 <__libc_init_array+0x1e>
 8009fc0:	0800a33c 	.word	0x0800a33c
 8009fc4:	0800a33c 	.word	0x0800a33c
 8009fc8:	0800a33c 	.word	0x0800a33c
 8009fcc:	0800a340 	.word	0x0800a340

08009fd0 <memcpy>:
 8009fd0:	440a      	add	r2, r1
 8009fd2:	4291      	cmp	r1, r2
 8009fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fd8:	d100      	bne.n	8009fdc <memcpy+0xc>
 8009fda:	4770      	bx	lr
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe6:	4291      	cmp	r1, r2
 8009fe8:	d1f9      	bne.n	8009fde <memcpy+0xe>
 8009fea:	bd10      	pop	{r4, pc}

08009fec <_init>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_fini>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr
